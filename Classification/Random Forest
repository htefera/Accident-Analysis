{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Random Forest (Ricardo)","provenance":[],"collapsed_sections":["SXfsro4yqLdf"]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"FllH47XeSGP3","colab_type":"code","colab":{}},"source":["import numpy as np\n","import pandas as pd\n","from IPython.core.interactiveshell import InteractiveShell\n","import matplotlib.pyplot as plt\n","# Libraries for importing datasets from Google Drive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","from sklearn import preprocessing\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.pipeline import make_pipeline\n","from sklearn.model_selection import train_test_split\n","from time import time"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"p3XrKUcgupKd","colab_type":"code","colab":{}},"source":["InteractiveShell.ast_node_interactivity = \"all\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"axm_Un_0SzH6","colab_type":"code","colab":{}},"source":["# Configuring Google Drive file loading (run it only once)\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"R7BYu4SKS1NX","colab_type":"code","outputId":"4cc9c859-ff8b-4344-f2b5-7a09e447c63d","executionInfo":{"status":"ok","timestamp":1575899067588,"user_tz":-60,"elapsed":6059,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":73}},"source":["link = 'https://drive.google.com/open?id=1MURORv9iCRNNZtZORoNlv3WtDAYcGYqJ'\n","id = link.split('=')[1]\n","\n","downloaded = drive.CreateFile({'id':id}) \n","downloaded.GetContentFile(id)  \n","imported_df = pd.read_csv(id, sep=',')"],"execution_count":31,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py:2718: DtypeWarning: Columns (31) have mixed types. Specify dtype option on import or set low_memory=False.\n","  interactivity=interactivity, compiler=compiler, result=result)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"7_GttudqlqgL","colab_type":"text"},"source":["What we know:\n","the db is really skewed, a lot of 3 accident and a very few number of 1\n"]},{"cell_type":"markdown","metadata":{"id":"_rVY5LTQ5la4","colab_type":"text"},"source":["Import the db into *imported_db* and create a shallow copy into *df*"]},{"cell_type":"code","metadata":{"id":"9UF7wGsc_3LP","colab_type":"code","colab":{}},"source":["df = imported_df.copy(deep = False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ai7cm4ivF01A","colab_type":"code","outputId":"fcda3b2e-13f6-41b9-a960-dacbc80b5b55","executionInfo":{"status":"ok","timestamp":1575899072884,"user_tz":-60,"elapsed":1237,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":144}},"source":["# CHECK THE CORRELATION MATRIX AND RETURN THE ATTRIBUTES THAT ARE CORRELATED 0.8 OR LESS THAN -0.8\n","c = df.corr().abs()\n","s = c.unstack()\n","so = s.sort_values(kind=\"quicksort\")\n","so.loc[((so>0.8) & (so < 1)) | ((so < -0.8))]"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Police_Force                Local_Authority_(District)    0.982313\n","Local_Authority_(District)  Police_Force                  0.982313\n","Location_Easting_OSGR       Longitude                     0.999394\n","Longitude                   Location_Easting_OSGR         0.999394\n","Location_Northing_OSGR      Latitude                      0.999974\n","Latitude                    Location_Northing_OSGR        0.999974\n","dtype: float64"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"v7uc1QSw50xi","colab_type":"text"},"source":["Remove columns that don't fit the purpose of our analysis"]},{"cell_type":"code","metadata":{"id":"K_P0tszpGnQf","colab_type":"code","colab":{}},"source":["# for every column if it contains just one value (without add Nan to the count) drop it\n","for col in df:\n","  if not df[col].value_counts().to_list():\n","    df.drop(col, axis = 1,inplace = True)\n","\n","# removig the index\n","df.drop('Accident_Index',axis = 1, inplace = True)\n","# removing useless columns (more than 90% of the data have the same value)\n","df.drop('Special_Conditions_at_Site', axis = 1,inplace = True)\n","df.drop('Carriageway_Hazards',axis = 1,inplace = True)\n","df.drop('Pedestrian_Crossing-Human_Control',axis = 1, inplace= True)\n","# removing duplicate of coordinate system\n","df.drop('Location_Northing_OSGR',axis = 1, inplace = True)\n","df.drop('Location_Easting_OSGR',axis = 1,inplace = True)\n","df.drop('LSOA_of_Accident_Location',axis = 1,inplace = True)\n","df.drop('1st_Road_Class',axis = 1, inplace = True)\n","df.drop('1st_Road_Number',axis = 1, inplace = True)\n","df.drop('2nd_Road_Class',axis = 1, inplace = True)\n","df.drop('2nd_Road_Number',axis = 1, inplace = True)\n","df.drop('Police_Force',axis = 1, inplace = True)\n","df.drop('Local_Authority_(District)',axis = 1,inplace = True)\n","\n","# removing junctioncontrol because it has 40% of nan values\n","df.drop('Junction_Control',axis = 1,inplace = True)\n","# REMOVE ALSO THE FIRST AND SECOND ORDER STUFF BECAUSE THEY ARE USEFUL ONLY FOR JUNCTIONS\n","\n","# removing the date because we just use the day of the week\n","df.drop('Date',inplace = True, axis = 1)\n","\n","# removing 13 nan rows in time, no way to impute it\n","df.dropna(subset = ['Time'],inplace = True)\n","df.dropna(subset = ['Did_Police_Officer_Attend_Scene_of_Accident'],inplace = True)\n","\n","# merging attribute values\n","df.loc[df['Number_of_Vehicles'] > 2,'Number_of_Vehicles'] = '3+'\n","df.loc[df['Number_of_Vehicles'] == 2,'Number_of_Vehicles'] = 'two'\n","df.loc[df['Number_of_Vehicles'] == 1,'Number_of_Vehicles'] = 'two'\n","df.loc[(df['Road_Type'] != 'Single carriageway') & (df['Road_Type'] != 'Dual carriageway'),'Road_Type'] = 'Other'\n","df.loc[df['Pedestrian_Crossing-Physical_Facilities'] != 'No physical crossing within 50 meters', 'Pedestrian_Crossing-Physical_Facilities'] = 'Physical Crossing present'\n","df.loc[(df['Weather_Conditions'] != 'Fine without high winds') & (df['Weather_Conditions'] != 'Raining without high winds'), 'Weather_Conditions'] = 'Other'\n","df.loc[(df['Road_Surface_Conditions'] != 'Dry') & (df['Road_Surface_Conditions'] != 'Wet/Damp'),'Road_Surface_Conditions'] = 'Extreme_condition' \n","df.loc[(df['Number_of_Casualties'] != 1) & (df['Number_of_Casualties'] != 2),'Number_of_Casualties'] = '3+'\n","df.loc[df['Number_of_Casualties'] == 2,'Number_of_Casualties'] = 'two'\n","df.loc[df['Number_of_Casualties'] == 1,'Number_of_Casualties'] = 'two' \n","df.loc[(df['Light_Conditions'] == 'Daylight: Street light present') | (df['Light_Conditions'] == 'Darkness: Street lights present and lit'),'Light_Conditions'] = 'Proper lightning'\n","df.loc[(df['Light_Conditions'] == 'Darkness: Street lights present but unlit') | (df['Light_Conditions'] == 'Darkeness: No street lighting'),'Light_Conditions'] = 'Insufficient lightning'\n","df.loc[df['Light_Conditions'] == 'Darkness: Street lighting unknown','Light_Conditions'] = 'Unknown'\n","df.loc[df['Speed_limit'] == 10,'Speed_limit'] = 20\n","hours = pd.to_datetime(df['Time'], format='%H:%M').dt.hour\n","df['Time'] = pd.cut(hours, \n","                    bins=[0,6,12,18,24], \n","                    include_lowest=True, \n","                    labels=['Midnight','Morning','Evening','Night'])\n","\n","# TODO -> DEAL WITH LAT AND LON (Dimitris)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CqWTA0ypqS5V","colab_type":"code","colab":{}},"source":["# DISCRETIZE COLUMNS\n","df['Day_of_Week'] = df['Day_of_Week'].apply(str) # categorical\n","df['Time'] = df['Time'].apply(str) # categorical\n","df['Road_Type'] = df['Road_Type'].apply(str) # categorical\n","df['Speed_limit'] = df['Speed_limit'].apply(str) # categorical\n","df['Urban_or_Rural_Area'] = df['Urban_or_Rural_Area'].apply(str) # categorical\n","df['Year'] = df['Year'].apply(str) # categorical\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BotumNylSZW4","colab_type":"code","colab":{}},"source":["features = df.drop('Accident_Severity',axis = 1).copy()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"XW74a4YqeLiN","colab_type":"code","colab":{}},"source":["# Salvo le variabili categoriali\n","categorical_features = features.select_dtypes(include = ['object','category']).columns\n","\n","# One Hot Encoding delle feature categoriali \n","categorical_transformer = Pipeline(steps = [\n","    ('onehot', preprocessing.OneHotEncoder())\n","])\n","\n","numerical_features = features.select_dtypes(exclude = ['object','category']).columns\n","\n","\n","numerical_transformer = Pipeline(steps = [\n","    ('scaler',preprocessing.StandardScaler())\n","])\n","\n","# Aggiungo le pipeline in un unico processo preprocessor\n","preprocessor = ColumnTransformer( transformers = [\n","    ('num',numerical_transformer, numerical_features),                                 \n","    ('cat',categorical_transformer, categorical_features)\n","])\n","\n","# Creo un modello che contenga tutte le feature possibili -> massima varianza\n","transformation = make_pipeline(\n","    preprocessor\n",")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"mezFoOQjmt8x","colab_type":"code","outputId":"e9859c20-9311-4361-d2be-99efbaeb47c9","executionInfo":{"status":"ok","timestamp":1575899090902,"user_tz":-60,"elapsed":3398,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":453}},"source":["transformation.fit(features)"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Pipeline(memory=None,\n","         steps=[('columntransformer',\n","                 ColumnTransformer(n_jobs=None, remainder='drop',\n","                                   sparse_threshold=0.3,\n","                                   transformer_weights=None,\n","                                   transformers=[('num',\n","                                                  Pipeline(memory=None,\n","                                                           steps=[('scaler',\n","                                                                   StandardScaler(copy=True,\n","                                                                                  with_mean=True,\n","                                                                                  with_std=True))],\n","                                                           verbose=False),\n","                                                  Index(['Longitude', 'Latitude'], dtype='object')),\n","                                                 ('cat',\n","                                                  Pipeline(memory=None,\n","                                                           s...\n","                                                  Index(['Number_of_Vehicles', 'Number_of_Casualties', 'Day_of_Week', 'Time',\n","       'Local_Authority_(Highway)', 'Road_Type', 'Speed_limit',\n","       'Pedestrian_Crossing-Physical_Facilities', 'Light_Conditions',\n","       'Weather_Conditions', 'Road_Surface_Conditions', 'Urban_or_Rural_Area',\n","       'Did_Police_Officer_Attend_Scene_of_Accident', 'Year'],\n","      dtype='object'))],\n","                                   verbose=False))],\n","         verbose=False)"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"id":"ezvrxwDKuOYY","colab_type":"code","colab":{}},"source":["# split in train and test\n","train_df, test_df = train_test_split(df,test_size = 0.2)\n","X_train = train_df.drop('Accident_Severity',axis = 1).copy()\n","y_train = train_df['Accident_Severity'].copy()\n","X_test = test_df.drop('Accident_Severity',axis = 1).copy()\n","y_test = test_df['Accident_Severity'].copy()\n","\n","y_train[y_train != 3] = 1\n","y_train[y_train == 3] = 0\n","y_test[y_test != 3] = 1\n","y_test[y_test == 3] = 0\n","\n","# merge the fatal and the serious together\n","#y_train[y_train != 3] = 2\n","#y_test[y_test != 3] = 2"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"1OAIf1uEgofM","colab_type":"text"},"source":["#HOW TO RUN A MODEL"]},{"cell_type":"markdown","metadata":{"id":"wcXzdAB5WmOQ","colab_type":"text"},"source":["\n","Assign the model with all the parameter that you want to add to a variable. \n","\n","```\n","RFClassifier = RandomForestClassifier(n_estimators= 10, max_depth= 2)\n","```\n","\n","Fit the classifier using the transformation of X:\n","\n","```\n","RFClassifier.fit(transformation.transform(X_train),y_train)\n","```\n","\n","In this way what is happening is that X_train is transformed with OneHotEncoding and then this tranformation is ingested by the classifier with the y_train as is.\n","\n","Then you just scor what you obtain on the test using the classifier you have just fit with the measure that you prefer and you apply this thing to the transformation of X_test and y_test. I used the score function but i don't know what particular measure is the best, we have to check for it\n","\n","```\n","print(tempclass.score(transformation.transform(X_test),y_test))\n","```\n","\n","I also added a script to use the gridsearch if you want to use it. \n","As you can see the things work in a same way, you set a key-value for the attributes, assign to a variable, fit the grid to the model with the transformation of x etc. I also added a function that print the best parameters found but i dont know how it is estimated that a partcular set is the best.\n","\n"]},{"cell_type":"code","metadata":{"id":"csfTjcOrUvTd","colab_type":"code","outputId":"a1d481d5-3900-4416-83ac-abab60e81ebf","executionInfo":{"status":"ok","timestamp":1575901292103,"user_tz":-60,"elapsed":60252,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":162}},"source":["start = time()\n","from sklearn.ensemble import RandomForestClassifier\n","tempclass = RandomForestClassifier(n_estimators= 100, max_depth= 10, max_features='auto', criterion='gini', class_weight={0:15, 1:85})\n","tempclass.fit(transformation.transform(X_train),y_train)\n","end = time()\n","print('\\n' + str(end - start))"],"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=True, class_weight={0: 15, 1: 85},\n","                       criterion='gini', max_depth=10, max_features='auto',\n","                       max_leaf_nodes=None, min_impurity_decrease=0.0,\n","                       min_impurity_split=None, min_samples_leaf=1,\n","                       min_samples_split=2, min_weight_fraction_leaf=0.0,\n","                       n_estimators=100, n_jobs=None, oob_score=False,\n","                       random_state=None, verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":60},{"output_type":"stream","text":["\n","59.48971629142761\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rpotQZ4q4MqM","colab_type":"code","colab":{}},"source":["predicted = tempclass.predict(transformation.transform(X_test))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CGOqFIqAaEDt","colab_type":"code","outputId":"5787310e-e0ea-4ea3-8155-eb5ccc56e3a6","colab":{"base_uri":"https://localhost:8080/","height":73}},"source":["from sklearn.model_selection import GridSearchCV\n","t2 = RandomForestClassifier()\n","param_grid = {\"n_estimators\": [20],\n","              \"max_depth\": range(10, 25, 5),\n","              \"max_features\": ['auto', 'log2', 'sqrt'],\n","              \"criterion\": ['gini', 'entropy']}\n","\n","# Applico la selezione GridSearchCV con 12 diverse configurazioni e cross validation 5-fold \n","grid_search = GridSearchCV(t2, param_grid=param_grid, cv=3, n_jobs = -1)\n","# Alleno il modello sulla rappresentazione ottimizzata delle features del train\n","grid_search.fit(transformation.transform(X_train),y_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak.\n","  \"timeout or by a memory leak.\", UserWarning\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"krItGvagdfcU","colab_type":"code","outputId":"30169bbc-9048-42b7-e4e7-81d8f55d1558","executionInfo":{"status":"ok","timestamp":1575886433769,"user_tz":-60,"elapsed":506,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":90}},"source":["grid_search.best_params_"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'criterion': 'gini',\n"," 'max_depth': 10,\n"," 'max_features': 'auto',\n"," 'n_estimators': 10}"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"code","metadata":{"id":"I_Kw8ccAe4lJ","colab_type":"code","outputId":"f377510d-3589-4e84-bbef-4aa5a9386119","executionInfo":{"status":"ok","timestamp":1575887468642,"user_tz":-60,"elapsed":7586,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":144}},"source":["t2 = RandomForestClassifier(criterion = 'gini', max_depth = 10, max_features='auto', n_estimators=10)\n","t2.fit(transformation.transform(X_train),y_train)\n","predicted = t2.predict(transformation.transform(X_test))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n","                       max_depth=10, max_features='auto', max_leaf_nodes=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=10,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"xZdLKnPtaGc3","colab_type":"code","outputId":"1f01c8ed-904c-430a-dc26-20f92bf82e5d","executionInfo":{"status":"ok","timestamp":1575886732419,"user_tz":-60,"elapsed":886,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":35}},"source":["print(t2.score(transformation.transform(X_test),y_test))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["0.8461430861766573\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"QRof24WtDXcH","colab_type":"code","outputId":"eb954c34-160e-49f0-a814-8efdb3c95360","executionInfo":{"status":"ok","timestamp":1575901311564,"user_tz":-60,"elapsed":1244,"user":{"displayName":"Ricardo Holthausen","photoUrl":"https://lh3.googleusercontent.com/-t1rYQ8R-3gE/AAAAAAAAAAI/AAAAAAAAM6I/R5II43zm0Yw/s64/photo.jpg","userId":"13304780839224683544"}},"colab":{"base_uri":"https://localhost:8080/","height":126}},"source":["from sklearn import metrics\n","from sklearn.metrics import confusion_matrix\n","\n","accuracy = metrics.accuracy_score(y_test, predicted)  \n","precision = metrics.precision_score(y_test, predicted, pos_label=1) \n","recall = metrics.recall_score(y_test, predicted, pos_label=1) \n","fmeasure = metrics.f1_score(y_test, predicted, pos_label=1)\n","\n","folds = 1\n","print(\"Precision = \" + str(precision/folds))\n","print(\"Accuracy = \" + str(accuracy/folds))\n","print(\"Recall = \" + str(recall/folds))\n","print(\"F-Measure = \" + str(fmeasure/folds))\n","\n","confusion_matrix(y_test, predicted)"],"execution_count":62,"outputs":[{"output_type":"stream","text":["Precision = 0.21062618595825428\n","Accuracy = 0.5542033850888236\n","Recall = 0.6694537728736892\n","F-Measure = 0.32043564551314646\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["array([[41738, 36608],\n","       [ 4823,  9768]])"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"markdown","metadata":{"id":"SXfsro4yqLdf","colab_type":"text"},"source":["#TEST STUFF (DONT CONSIDER THESE CELLS)"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"A205dsHUrcCQ","colab":{}},"source":["# OOH for sure\n","#df['Urban_or_Rural_Area'].unique()\n","# it must be ooh probably\n","#df['Police_Force'].unique()\n","#df['Number_of_Vehicles'].unique()\n","#df['Number_of_Casualties'].unique()\n","#df['Local_Authority_(District)'].unique()\n","# df['1st_Road_Class'].unique()\n","# df['1st_Road_Number'].unique()\n","#df['2nd_Road_Class'].unique()\n","#df['2nd_Road_Number'].unique()\n","# string\n","#df['Local_Authority_(Highway)'].unique()\n","#df['Road_Type'].unique()\n","#df['Junction_Control'].unique() # NAN\n","#df['Pedestrian_Crossing-Human_Control'].unique()\n","#df['Pedestrian_Crossing-Physical_Facilities'].unique()\n","#df['Weather_Conditions'].unique()\n","#df['Road_Surface_Conditions'].unique() # nan\n","#df['Special_Conditions_at_Site'].unique() # nan\n","#df['Carriageway_Hazards'].unique() #nan\n","#df['Did_Police_Officer_Attend_Scene_of_Accident'].unique() # nan\n","#df['Year'].unique()\n","# holds a natural order\n","#df['Speed_limit'].unique()\n","#df['Light_Conditions'].unique()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"TsulSMFFrbjY","colab":{}},"source":["# ATTR THAT ARE PRETTY WELL DISTRIBUTED\n","#df['Urban_or_Rural_Area'].value_counts(normalize = True) # categorical\n","#df['Police_Force'].value_counts(normalize = True,dropna = False) # how to handle this?\n","#df['Local_Authority_(District)'].value_counts(normalize = True,dropna = False)\n","#df['1st_Road_Class'].value_counts(normalize = True,dropna = False)\n","#df['1st_Road_Number'].value_counts(normalize = True,dropna = False)\n","#df['Year'].value_counts(normalize = True,dropna = False)\n","#df['2nd_Road_Class'].value_counts(normalize = True,dropna = False)\n","#df['2nd_Road_Number'].value_counts(normalize = True,dropna = False)\n","#df['Local_Authority_(Highway)'].value_counts(normalize = True,dropna = False)\n","\n","\n","\n","\n","# ATTR THAT HAVE PROBLEMS WITH DATA\n","#df['Number_of_Vehicles'].value_counts(normalize = True, dropna = False) # 4 values hold 98% of data 1,2,... DONE\n","#df['Number_of_Casualties'].value_counts(normalize = True,dropna = False) # 4 values hold 98% of data 1,2,3+ DONE\n","#df['Road_Type'].value_counts(normalize = True,dropna = False) # unknown has really few observtions 1678 1,2, other? DONE\n","#df['Junction_Control'].value_counts(normalize = True,dropna = False) # NAN # almost 40% is nan impute using the neighbors #knn # ignored for now DONE \n","#df['Pedestrian_Crossing-Physical_Facilities'].value_counts(normalize = True,dropna = False) # a value has more than 80% data. Merge all the others? DONE \n","\n","#df['Weather_Conditions'].value_counts(normalize = True,dropna = False) # one value 80% results, merge the others? 1,2, other DONE \n","#df['Road_Surface_Conditions'].value_counts(normalize = True,dropna = False) # nan #two values have 96% of data and nan to be imputed (i think to the majority) 1,2,extreme conditions DONE\n","#df['Did_Police_Officer_Attend_Scene_of_Accident'].value_counts(normalize = True,dropna = False) # nan with 2 value, MERGE WITH NO DONE\n","#df['Speed_limit'].value_counts(normalize = True, dropna = False) # remove velocity 10. just one observation merge 10 and 20 DONE\n","#df['Light_Conditions'].value_counts(normalize = True,dropna = False) # maybe merge things to proper lightning and dark DONE\n","#df['LSOA_of_Accident_Location'].value_counts(normalize = True, dropna = False) DONE\n","\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_kOEe8niTexj","colab_type":"code","colab":{}},"source":["df3 = imported_df[imported_df['Accident_Severity'] == 2]\n","df4 = imported_df[imported_df['Accident_Severity'] == 3]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"YOxKowwETjBo","colab_type":"code","outputId":"dba278a5-c632-4462-8b7f-568aaa772f1a","executionInfo":{"status":"ok","timestamp":1575828118827,"user_tz":-60,"elapsed":5073,"user":{"displayName":"andrea armani","photoUrl":"","userId":"15343573881514438993"}},"colab":{"base_uri":"https://localhost:8080/","height":500}},"source":["plt.figure(figsize=(10, 8))\n","plt.scatter(df4['Location_Easting_OSGR'], df4['Location_Northing_OSGR'], c = 'green')\n","plt.scatter(df3['Location_Easting_OSGR'], df3['Location_Northing_OSGR'], c = 'red')\n","\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7ff544f19a90>"]},"metadata":{"tags":[]},"execution_count":80},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAm8AAAHSCAYAAAC6iiy+AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nOy9fXxU5Z33/75mMoGEaIAJ3VUxE3br\n794bF/j5g7vutna3bdhWURele1txoghqJNEW3e2iJbsS7IaibVWqAqYWimTEulvUAtq1xm0rdtst\nbNuw2u3qa8lEtFshQDAPkGTm+v1x5kzOzJxz5szkOfm+X695ZXKdp2vOOZnzyfdRaa0RBEEQBEEQ\nxge+0Z6AIAiCIAiC4B0Rb4IgCIIgCOMIEW+CIAiCIAjjCBFvgiAIgiAI4wgRb4IgCIIgCOMIEW+C\nIAiCIAjjiILRnsBIUVZWpisqKkZ7GoIgCIIgCFk5dOjQca31LLtlk0a8VVRUcPDgwdGehiAIgiAI\nQlaUUlGnZeI2FQRBEARBGEeIeBMEQRAEQRhHiHgTBEEQBEEYR4h4EwRBEARBGEeIeBMEQRAEQRhH\niHgTBEEQBEEYR4h4EwRBEARBGEeIeBMEQRAEQRhHiHgTBEEQBEEYR4h4EwRBEARBGEeIeBMEQRAE\nQRhHZBVvSqntSqn3lVL/YRn7qlLqP5VSLUqp55RS0y3LvqSUelsp9Rul1Gcs45cnxt5WSt1rGZ+j\nlPpZYvw7SqnCxPiUxO9vJ5ZXZDuGIAiCIAjCRMeL5e3bwOVpYz8A/lhrPR/4L+BLAEqpucD1wMWJ\nbbYopfxKKT/wOHAFMBdYnlgX4AHgYa31h4GTwC2J8VuAk4nxhxPrOR4jx88tCIIgCIIwLskq3rTW\nPwZOpI29rLXuT/z6U2B24v1S4Bmt9Vmt9RHgbeAjidfbWuv/1lr3As8AS5VSCvgU8E+J7XcC11j2\ntTPx/p+AysT6TscQBEEQBEGY8AxFzNsq4KXE+wuAdyzLjibGnMaDwCmLEDTHU/aVWN6RWN9pX4Ig\nCIIgCBOeQYk3pVQd0A9EhmY6Q4tSqlopdVApdfDYsWOjPR1BEIQJQ+RwhIpHKvBt8FHxSAWRw9kf\nA/lsIwhCJgX5bqiUuhm4CqjUWuvE8LvAhZbVZifGcBhvB6YrpQoS1jXr+ua+jiqlCoDSxPpux0hB\na90INAIsWrRI260jCIIg5EbkcITqvdV093UDEO2IUr23GoDwvLDjNqteWEVvrDe5zaoXVrluIwiC\nPXlZ3pRSlwNrgb/UWndbFn0PuD6RKToHuAj4N+DnwEWJzNJCjISD7yVE378Af5XYfgXwgmVfKxLv\n/wp4NbG+0zEEQRCEEaCuuS4p3Ey6+7qpa65L/p5uZVu9b3VSuJn0xnpZ89KaEZmzIEwkslrelFK7\ngU8AZUqpo8B6jOzSKcAPjBwCfqq1Xq21fkMp9SzwJoY79Q6tdSyxnzuBfwb8wHat9RuJQ9wDPKOU\n+gfgF8C3EuPfAnYppd7GSJi4HsDtGIIgCMLw09bR5jpuZ5lzor2nfegnKAgTHDXg8ZzYLFq0SB88\neHC0pyEIgjDuiByOUNdcR1tHG+Wl5XT2dtqKrlBpiNa7Wql4pMJVsKWj10+O55Ag5IJS6pDWepHd\nsrxj3gRBEISJj50VrdBfSMAXoC/el1yvOFBMQ2UD4GyZsyNYFBzaCQvCJEDaYwmCIAiO2MW39cZ6\nOXfKuYRKQygUn38ryO8eK+KGBVUcnVnA9S3eLGkBX4DNV2wejmkLwoRGxJsgCILgiJMVrb2nnWhH\nlOUtmq8/c4KS37ajNMw+GWP787C8JXX94kAxNYtqkoIvVBpixzU7JNNUEPJA3KaCIAiCI+Wl5a7x\na4+8BIFYqqVtahw2vwS75xu/h0pDNFQ2iFAThCFCLG+CIAiCIw2VDRQHih2Xl/W4jysUrXe1utZ/\nk8K9gpAbYnkTBEEQHDFFV9Weqry2Ly8td1yWT7FfQRDE8iYIgiBkITwvTKg0ZLvseJH9Nua4mYFq\nh5div4IgZCLiTRAEQXAmEoGKCo78dZTWhzMTEdZcAWf9qWNn/fCdi+HIw7B8vpGBemBTbcausxX7\nFQTBHhFvgiAIQgpmHFr4s4rulTdCNIrSEOqAJ/emCrjd82HlUmgthTjQryAQg9qDUNFhPGRmn4xx\nyX1bMwSck0vVzdUqCIKIN0EQBMGCGYcW7YjS0AzFfamZpMV9sOlVlTK2ez6sq4SeABRo48GS/nCZ\n1gcVDzamjNklQ1iL/QqCYI+IN0EQBCGJNQ6tvMN+ndmnUgXd8hZ46jlDoLlx/snUNtTheWEar25M\nqf3WeHWjJCsIQhYk21QQBEFIYo03ays1XJ8Z65QOvF/eAt/ca1jcvHBgUy2X3bsl+Xt4XljEmiDk\niFjeBEEQhCTWeLN1ldAVSF3eHVCsqxz4fWNzdoubiQ+4tC4z9k0QhNwQ8SYIgiAkscah7Z4Pt10N\nbdMVWgGhEP9+/2peWDgQp+bkWnUiEM+MfRMEITdEvAmCIAhJ0uPQfvLxEK/9eBcqrqG1lcvu3ULj\n1Y0Ei4JAqgvVK+mxb4Ig5IbS2mOgwjhn0aJF+uDBg6M9DUEQhAlBxSMVicb0RsybV9cpwNEZfmaf\n6B++yQnCBEApdUhrvchumVjeBEEQhJwxExtM1+qxIvBiCujzQeva6uGdnCBMcES8CYIgCDljTWzY\nPR8+dA+Elw2IOA10+4zCvebvpwvhZw01KdmmgiDkjpQKEQRBEHKmobIhpak8GCJu9/zMdX3Kx+0L\nb2fLlVu4bATnKAgTFRFvgiAIQs6YtdnWvLSG9p52x/WCRUGOrz0+UtMShEmBuE0FQRCEvAjPC1NS\nWOK6zomeEyM0G0GYPIh4EwRBEPIm2hF1XS5N5gVh6BHxJgiCIORF5HDEdbk0mReE4UHEmyAIgpAX\ndc11rsulybwgDA8i3gRBEIS8sDaxTydUGhLhJgjDhIg3QRAEIS+c4tkUStylgjCMiHgTBEEQ8sLa\nxN5EoVi9aLVY3QRhGBHxJgiCIORFehP7UGmIXct2seVK6aAgCMOJNKYXBEEQBEEYY0hjekEQBEEQ\nhAmCiDdBEARBEIRxhIg3QRAEQRCEcYSIN0EQBEEQhHGEiDdBEARBEIRxhIg3QRAEQRCEcYSIN0EQ\nBEEQhHGEiDdBEARBEIRxhIg3QRAEQRCEcYSIN0EQBEEQhHGEiDdBEARBEIRxhIg3QRAEQRCEcYSI\nN0EQBEEQhHGEiDdBECYvkQhUVIDPZ/yMREZ7RoIgCFkR8SYIwuQkEoHqaohGQWvj58qVUFYmYk4Q\nhDFNwWhPQBAEYVSoq4Pu7tSxvj5obzfeR6OGuAMIh0d2boIgCC6I5U0QhMlJW1v2dbq7DZEnCIIw\nhhDxJgjC5KS83Nt6XkSeIAjCCCLiTRCEyUlDAxQXZ1/Pq8gTBEEYIUS8CYIwOQmHOfD3Kzg6w08c\naC9WxAJpYcDFxYbIEwRBGENIwoIgCJOSyOEI1fGddK+JJUY0N7+hePRAkJL/OWFY3BoaJFlBEIQx\nh1jeBEGYPFjquv35n69g6aHUbNNvX9zHH68tgXgcWltFuAmCMCYRy5sgCJODSIT+W1dRcKYXgNkn\nY3xzr7Fo9/yB1do6JEFBEISxjVjeBEEY1xzYVMvRmQXEleLozAIObKrNWCdyOMI7d96UFG4m0/pg\nY3PquuWlkqAgCMLYRixvgiCMWw5squWS+7Yyrc/4ffbJGDPu28qqf99OZJ6mNz4g1mKn7PdR3jHw\nvjhQTEOlJCgIgjC2EcubIAjjlrlffiIp3Eym9UHjP52l575ejjwMy1uM8bZS+31Yx7v7urlz/53D\nM1lBEIQhQsSbIAjjk0iEGd1x20UF2vhyq+iAb+41BNy6SugKpK7XFYB9F8GRhyFWb/y84uen8G/w\nD/v0BUEQ8kXEmyAI45LfrbkV5WE9M65t93y47WpoLYU4xs8dC2DlrwyRZxV7n2uJozYoKh6pIHJY\nmtMLgjC2yCrelFLblVLvK6X+wzI2Uyn1A6XUW4mfMxLjSin1DaXU20qpFqXU/2fZZkVi/beUUiss\n4wuVUocT23xDKaXyPYYgCJOHWe1nPK9rxrXtng9z7gZ/vfHzqrewdbtufsl4H+2IUrWnipKNJfg2\n+ETMCYIwJvBiefs2cHna2L1As9b6IqA58TvAFcBFiVc1sBUMIQasBy4FPgKsN8VYYp3bLNtdns8x\nBEGYXDjFsOWyrjVZwUpZz0CsHEBXXxcaTbQjSvXeahFwgiCMKlnFm9b6x8CJtOGlwM7E+53ANZbx\np7TBT4HpSqnzgM8AP9Ban9BanwR+AFyeWHau1vqnWmsNPJW2r1yOIQjCJGJdpeH+zEZXwFjXDidR\np8gsIWLS3ddNXXOdlykKgiAMC/nGvP2e1vq3iff/A/xe4v0FwDuW9Y4mxtzGj9qM53MMQRAmEe8v\nrWTLokwBd9YPx4qM8c7zgvzi/hpevjSYss4NLUZyQnkHaIf9O1nlQAr5CoIwugy6zpvWWiulnL7/\nhoR8j6GUqsZwrVJeLoU3BWEi8cpNr7CYxfzkhWY2Nhtiq60UXr21klVfewWAEuAy4DhbAKNY7ytf\nXslje/syYt3ScXPLSiFfQRBGk3zF2++UUudprX+bcFm+nxh/F7jQst7sxNi7wCfSxn+YGJ9ts34+\nx8hAa90INAIsWrRoWAWmIAgjzys3vQI3DfxeAaxyWb+uuY4fvpxduLm5WqWQryAIo02+btPvAWbG\n6ArgBcv4TYmM0D8BOhKuz38GPq2UmpFIVPg08M+JZaeVUn+SyDK9KW1fuRxDEATBlbaONkd3qGag\nhMhtVw/0O50WmEawKIhCESoN0Xh1I+F50rBeEITRI6vlTSm1G8NqVqaUOoqRNboJeFYpdQsQBa5L\nrP4isAR4G+gGVgJorU8opb4M/Dyx3v1aazMJohYjo7UIeCnxItdjCIIgZKO8tJy20igVNgIuWmqU\nDzFRKFYvWs2WK7eM3AQFQRA8oIwkz4nPokWL9MGDB0d7GoIgjCKRwxFerK+icW9qfbeuQKq1LVQa\noqGyQSxsgiCMGkqpQ1rrRXbLpDG9IAiThvC8MK+vep1qttJgSXJYVzkg3BSK1rtaR3WegiAIboh4\nEwRhXBI5HKGuuc6IYystTyYRrHlpDe097QAEi4JsvmJzigVty5VbiJR/jA8vWEFMxzL2K5mkgiCM\ndaS3qSAII0bkcISKRyoyWk1FDkco2ViC2qBQGxT++/3U7q912EmEzvPLWD6/ih/WR7m+xeh8sPL5\nldz8/M1J4QbQ3tPOyudXcmBTLVRUgM8HFRWEW2DntTspDhSn7FoySQVBGA9IzJsgCCPCBV+/gD//\nyXspNdnqKuF3Syt59cir6LRyuctbSFl330XwuTeM1lXWhvTp8WrpLG+BJ/cqivss+y8uhsZGIvPJ\nsN5JnJsgCGMBt5g3EW/CiGHn5pIHZSZj+TzV7q9l28FtKUKrZlFNSkam3fw3/ngjC159k29mSRQw\nWd5CxrqaVNFmpTUtU9TKkYexzS4lFILWVrePKwiCMGqIeEPE22hgfYjPLJrJB70f0BvrTS4vDhRL\nzaw0IocjVO+tpruvOzk23OfJq1is3V/L1oNbbfdhCjin+Xf3dTuKqHThtbwFnnoOCnL4aooD/nr7\nZbF6+/gQrUDFJ8f3nyAI4w8Rb4h4GwlMERDtiKJQGW4wO0KlIcnss1DxSAXRjmjGeLAoSElhyZBY\n49JF9emzp+mLD5i4nMRiwf0FtgH+AH7lp/++fsf5g7OIsgovO4ubF+wsb6bbNdRhb7E7OsPP7BP9\nuR1IEARhhHATb5KwIAwJpsXFfHB7EW4wsRt8OwXnu+F0Ptp72ol2RNEYwfnVe6s97c9uTuZ10mja\ne9pThBtAd183dc11Gds6CTdzmW+Dz1G4gXOvUOv4xubchZtdKytTBFY4CLeuANzzSefPIwiCMJYR\n8SbkRySSkr33swfWpLjKvDJRyzKkiySvgsvr+XASWNmoa67zdJ3sRKRf+V23cRPsfvysqzREk5V0\n4eXUusqJmLKPmXMSgRo4VmRs8/rHQ7kdTBAEYYwg4k1wJd16dGBTLZSVQVUVRKOgNUSjfOXZdpa3\n5LbviVyWwU4kdfd1s+K5Fa4CrqGyIaN8hRP5WC29bmMnIqsXVud8PDCu885lO/nVp+Zy29WGi9Ou\nhyhAe5H9PpxkodL2WaZOIlABwR74aBssuWhJDp9CEARh7CBFeoUUavfX0niokZiOoVD4fX7640Zc\n0Edfi3LJ3q1gY9GY1mcEmYNzyQa/8qPRxHUcv/KzYsGKCZus4CSSYjpG9V5DBNl9dnPMjElzs2bl\nY7UsLy13dW2Cs6g2M0rTs02dUKiU+LzwvDDcMbD89cMRXn5pDVgK6p4z5Sz0dGbsK67Ab3NIN1es\nbYYpxn+stQfh5h2NIH1LBUEYh0jCggAYFrbV+1bT2Zv54DRxLLlgwan0Q0lhCWf7z3oKjB+PpGds\ndvZ2phSLTcdrooZTAoBCsWvZLvdzF4lAXR20tUF5OTQ0EJlPRjZoob+QcwrP4UTPiZyTIQY1Pzt8\nPsOam0Yc6Al4KzMC3hIfWkuh4tTk+P4TBGH8IQkLgiORwxHKHiyjak+Vq3ADb/FI0/qMeCOfMm4t\n82dnb6fnwPjxhl182+mzpyn0Fzpu49V9aedGVShWL1qdXbhVV6e4tqmuJtwCjVc3EioNoVCESkNs\nX7qd42uPE18fp/Wu1pwEl5PrUaPzu7bl9tbE9iLoLjDcp9a4NScr7+75xvJ+p8Jw5B5fJwiCMFYQ\nt+kkJnI4witfXsnBl/tsG3Sn4+aKslLeAXEdBwZ+OjERsk3t4tv64n0Ei4KcOnNqUP0z092oni1j\ndXXQnZaY0N0NdXWEW3MTaG68+NaLjsvyurYNDYbotMz9rB/OOQtTLbdScaLCx7TANP7yUBebXzI6\nLwAcL4I1Vwzcx0177P9LbSuFitxnKAiCMOqI5W2CkUt5ip89sIbHnu+josO4ESo6DFeTU+KBXbag\nHQqI10N/PTy6z33diZBt6iRSTvScyLl/pt31C88L03pXa26WsTYH4eQ0niduAi2vaxsOQ2Oj0f1A\nKdpnlXC6MFW4wYCF9y8PdbH9eZiVaJmlMN7veMG4j3fPhy2LDLerla4APH393NznJwiCMAYQ8TZR\ncGjW7Vae4q/3tWfEBJkPRTtevjTId75QydEZfuJAe7HijM0dZD5E/cAdB50F3ETJNnUSKeWl5YTn\nhVmxYEWyzIZboka+5UXsD+4gnJzGc8AqME23eDoKlf+1DYeNtlXxON9v3kawx3618g7jXk0XdgBT\nYgP38eevgqplqVmum1fNZd22N/KbnyAIwigj4m0ikIhvKvlte4YFzS2uzCnmx2m8vaedW85p5sI1\nMfz1ULZWc8s1xsPQsZQDsPpQ5nioNDQukhW8WDLt4tJMYRo5HOGDHU/w9kMxYvXw9kMxPtjxhO1+\nnMqL5BU71tBgNF9PmVSxMT4I0gWmnUvYU0yeB4r/oZiqPVWuGaVucWvWZbvnwyfqQ+xuaaLilBbh\nJgjCuEbE20TAJr7JakFzcm11nxe0HXd6WNrx9HyjLZFbzp61xEPAF6BpWVPOgfGjgVdLWHheOCMJ\nYMWCFdQ117G/vopt34unuKa3fS/Ojxpuzzie03XKK3Yszf1IKGT8Hh7cOXcq8utX/uRn37VsV0qj\n+nyYsWkGPTHD5OZW3NftXjWXFfoLx809JwiC4AURbxMBhzgm0/Lg5NYr+epm+qemZkTatRryNAWX\nh2gskfEXLAqy45od4+YB6mQJe7G+itbpirhSvDPDz4FNtSlxaQ2VDez81U6iHVHbSv/T+mDd97sy\njufmfoU82m1Z3I+0tg5auIF7/bry0nLaOtqoa67Lz9XLwGc8dfZUcszMHLUr7ruuElvX/Vm/sSxY\nFGT70u3j5p4TBEHwgtR5mwhUVBilINJoLYWL12appRaJ8M6dN3HBqXjWbFM3lrfAzuchkBZ/pIHH\nF8GdPx9/95lvgy+jGK1d/bCuAPzi/houu9ewNllrn7k1Y/el/e2Zlj6rYDRr4UFmfbbRqJPnVtfN\neq68zK12fy1PHHoimZFc6CsEBb2x3pzmtLyFlGzTs9NLmPrYtiERq4IgCKOF1Hmb6NjEN3UF4KGr\ngtkf7uEwP/7xUxRu8DPn7vyEGxjbrbgGThcO1OKKYQi35z+fhylvDGBnCXOypFU82Jj83WqdcrJI\nvjs980/Pzv1qXr8hjYcbBE5159JFrtPcavfXUnB/AWqDYuvBrSmlZHrjvTkLNzDuvTl/N42nW5pQ\nWjP15Aci3ARBmNBInbeJgPmgslTTn9bQwDc8PsBMcbfmpTXJrgDBoiDXXXwdWw9u9TyN3fMzxV/l\nnEpeuekVz/sYSzRUNmRYu5wC5M8/ORC4b21Bta7S3lIXved2LrTZT7KNVBq5xsOld3zIpWuCG3Z1\n55zabaXPrXZ/bU73kxPBoiCbr9gsrlBBECYt4jYVXHFyk3lBoYivdy/SO9axiiCf8vH2QzHbQsVH\nZ/iZfaI/uY1V9C1vMSx25R3w3gw/rWurky5WrzhdB7s2W27u1+EQPE5zu+3X07jv5TOcfzLGezP8\n3PPJGE/nadk1aVrWJKJNEIRJgbhNhbxpqGxA4dJjyIWJUIDXmoiw89qd3PcXftvMx9a11clg+xv3\n3EhRQRHBoiAKxU8+HuL115rwac3sE/05CzdwL0eSzs8eWMMbD3YTqzf60ZolY1Y8t8IxkSDnZIi0\nuaW3AlveAg/v6WL2yRg+YPbJGI0uBaCdKA4U07SsCb1eo9drEW6CIAiIeBOyEJ4XZvWi1RkCzvw9\nVBqiZlFNTl0ExivheWE+c99O7l42LZn5+M50H7+4v4an58GNe25MlhVp72mnp7+HXct2DUmJCrd4\nuBQiEb7ybLtt14yYjtmWOln81GKq9lTlXRz49bbXM2LVnGIDnQpAmyhUUvSOl1qAgiAII424TScR\ng4mDyrbtcMVYjQcihyNU7amyXWbn1syHA5tqqXiwMemCdHS9OmQeHyuCD92TOSe3OLSMuUcinLlz\nNVNOdSaH2ovgC1dkxjq6Zdn66+0/47TANJ64+olJc98IgiC44eY2FfE2QYkcjqQkIEwLTKMv3pdi\nISn0F3JO4Tmc6Dkx6QTXUFC7v5bGQ422XQZMhiLu78CmWi65b6tjeRKrcO6v17aiSQPhZYbIss6p\n4P4Cx/kvb4FNrypmn9K0F8H0s5mlYMCos7bqmlQBd+RhbGMD26Yr/uBuHzEdw6/8VC+sHnRBX0EQ\nhImIm3iTbNMJQLrVa8lFS/jWL76VItT+8lBXMmh+oJ5bb1Lcma4yQAScB7Z/cTFrn2zmsZTzmbne\nUMT9VTzY6FieJHLlx1KSE9pK7UWTwnBZ7p6fOic34WZkyRr/3M1y6C8KRm9Rc98mTlm2bfespj+P\nmD9BEARhAIl5G+fYtXDadnBbinAzH8R2cVBWRqNu2EgzmMD8gZ1E+Nw3mrOeT2BI4v6sZUjSx9Pr\nv62rdG5VFuqAG1pgyUVLkmN+5bdd1y5mzY30EirpXRGOzvCnFDIWBEEQ8kfE2zjHrnhresHUXILH\n8+qjOU7w2qs0K3V1eQXj58t7M+wF1nsz/BnXa/d8OF5kvx8FNO6Fju1bqd1fC0D1wmrbdd0avtth\nV4z4ewunDTrLVhAEQchExNs4x4vYcnoQ241PhPIeTgxZl4IsvWSt3Pzczbnt24bWtdWO5Unsrtea\nKzIbuZtM64OGZth6cCtlD5YBMMU/JWM9t1616ZzxwX2LBwSmT/moWVRD57pOccELgiAMAyLexjle\nxJbTg/idtPGJWN4DgEgEyso4cneUeD28/0CqizNXa2Pn78+0Hbc7z/26n4sfvzin/adz2b1b+MX9\nNRyd4c9wQdrVfzNdlk7uU1Nktve0s/XgVs7Gzmas4+Z+1ZZXexEcbKjhM+t3JsuYXHjuhXys/GP5\nfVhBEAQhKyLexjjZYrScirfWLKohWBQEjAdxd7olpriYd+6tyV43bJxzYFMtvSuqoL0dheE6nNUD\n258fEHC5WhvXfSrTstUVMM4zGPs98jDJIrkLXn1zsB+Dy+7dwuwT/RkuSLv6bzWLavjuJYVEHUS7\nV6uak3iLloKvHuY8HOL7P2simkiaGLQ7WhAEQfCElAoZIfKpg+a1zZGnfUciKb1PaWiYEM27nT67\nWSrl4MZ22+xLMILpL16be9so3wYf17dom+xda5bmwPrWsh4jRe3+Wk5t32o7l9uuts+MteJU6kMD\njy+Cz1+VfQ5DVeNOEARhMiJ13hhd8ZZLr8n0Xpp2pRzkoWhgd14B5pbNpbWjle6+bsdisWBkQe5u\nyb1Xplu/VyfRk977dDgLGlvPi7Wvalsp7LsIrnorU3Sm43beYgpuvDa7AJwIvW0FQRBGCxFvjK54\n89pU3EmMpDPWHopu1q/hFCluIsrESUwBEApBa2vOx3US4z19PY5FcuOAT2vbbc1iye097YRbFP/Q\nrCnvgO7zgpR8dXPOFlKn87K8xXAXT7XcOtb4NXPeZraqW203Lxa8wf6TkX7/NJ1ZwmXbXkS3RTk+\n1Vgn2GOI0MevOZ+vfvvdvI8lCIIw1pDG9KOMU0B8+rhdNqQdYykj1Kn8Ru3+2mGPg/KSaLCuEs7a\nVNo468NwHeeBU59RcI4nM8t92F3j3phRLHl5CzyxVyfrx5X8tp3ulVWEP6tyqklnd16Wt8CuPanC\nDYwYQB/gT7w3YwKnn3WOeYPspVEGk/xyYFMt78zws3x+FT+sj3J9i+ajr0W55L6tEI2itDHHWT0D\ndfYe3PkeT//ZjNwPFokYLcV8Pqio4MCmWr5QVUbrdEVcKTrPLzPWGWW2f3Ex0cScWqcrHvs/itOF\nCq0GXqcLFdu/uHi0pyoIwggglrcRwKvlLfxZRYNNHJUVJ3fraOH02fzKP+wuXy+WNzCEy+aXoCxh\nSTpeBHddAZHv2t/7+VoMKx6p4KOvRV1j3nwbfBl1+EycrIStpTDnbsNCt33p9qxzST8vdnF4Xojj\n/t+dU5/SUGkodytrJELn32hs8QkAACAASURBVK5h2m+Njh/KsuisHwKx7P9pauA311XyR995JaM9\nXLAoyOYrNhtzikToXHUj03p1xrF6Ae2HKZZbtysAOxYMuJvfKYUvWf42zy85n4A/kDznj+6DmoOZ\n89WJY2mfj//6q0/ys6M/JfyvXfi1Mea7/XbYYsRFmvdgtCPKDS1GfT7r9TP3lU4vcPv/LWTx32e/\nTwRBGNuI25SxG/MGhjXmY69FM76gTdfUswv8xHV8TPYf9W3w8Y19mtWHwK+NeKhtC7MHtA9FX0u3\nhvDZcBKRdtdKodDorKLE3Hbpoe6UOLMNnzYepgArnlvh2JLKSzP3YFGQ42uPu362yOEIN+25iTiG\nmc3VdeyCBvqAQoflpqi00rTMewzhxY9fzJvH38xbXNphJlTYxfU9ug9qDw5YGHMhXcie9cPpQsNt\nG1fg08axfjMTPn0k+/7Nb12VNqZqaojUpLY8y/X69Sfmc3JWCcGHt02IxCRBmIyIeGNsZpsCyS9p\nt0ber/1415gSbFZ2fqyEm37SlfEQ2rII7vSQkVizqCZvARc5HOGWF26xrVPmx08Me5GkUOxaZn9O\ns1nzzPi0Ez0nMuKw3p3uZ+0nY3xngY+4TvVPBnwBlFIpbcvSyWZ5M0kXSKaVqf4f21NEdHMF/K8T\nRlusXMWKyelCQ6iU9aTuwy7mzelaplvBfvkYzLfoT2u83VCQbpWyfsPlex7yPXau9CsIrE8dc0se\nybq/qYUUPLldBJwgjENEvDH64s2K1SVi4vQFrRWo+Ni9RnG/H188M3ki5oNzv1ycNYbPr/z039ef\n83Hdkjvmls3l7ZNvOwolN8Ho5tZMx6ksiJdSHMnjKR9+5acv3pfT/qyJDU4Wn8EKCXMf4WXGe6vr\nOZ7Yt05YecBwR6+5InWuj+4jRVCeLISys8MvosYrGqOOnjUrOK6gYBBfAWemlzD15AdDNkdBEEYG\nSVgYQ1gD/K04Bbqr8tAIzCo3rIWDlY1wA/DFYcWCFcmgfiecXIjZcEvuePP4m7bCzad8NC1rcrX0\n5ZIMkkvPWCe01uy4Zgeh0lBGM/fWUnvhlp7YUNFh76obCoGkMEQbQHH/gMvRTyLRQacmOux8bqD4\n8aP74I6DhvBQGD/Hg3BL10kjmdetMK7nHQdJXt8C7Z48ko0ppzqJK0V0uiQ0CMJEQcTbCBI5HGHF\ncytsRce6Spt+lMXFeWdEDhfp2aVubD24lYbKBnYt2+W4jl/ZN13PRq4trcAQStncz2bHivQuCdZ2\nWia59Ix1ory0nPC8MK13taLXa37y8RBz7jZi3ObcbW/BsxONXgWR2xVzWlbWYwg4LzFpAT0g9lYf\nGh5BOZzEMGLmrAJ6yyLnXrHDhd15y1fAmRnFoQ64+evNbLs0v785QRDGDgWjPYHJgil6nCxN5kPa\nDHR/b4af2Y82jlisijUmb2aR0bvTjOuyBul7LWdiUrWnKtmmy47qhdV5zbe8tNxTpmn6Nl743C9j\nPGpxX1Z0GO5MSBVTbaUOcYo2VlS7mDe7choNlQ1Za/3lIg7TyUc8KQbcpV4w1/UPkbdfAz0+KIoP\nzGc40MCJKUayzefTlv2kfOBvszMA5/SNvBAdiuP5gNv/LY5Wih4FxWM4JEMQBGfE8jZCeBE9u+cb\n1pZzGor50Y92jqhws1rT2nvaae9pT9Znq9pTRdmDZUQORzIsXk79M63jZqC6HfkmK9j1dPWyjZXa\n/bUU3F+A2qCSrxv33Mh9L5+1dYd+pdkQYSZ21lKzx2mhv5BgUTBZB27HNTvYvnR71l6y1hpyTnjt\nTZorQy1GYjns0ElCaODlOfD+Ocb7M/7BuRDdUBhu3Uf3ZS4z/zarlg3UxBuvmG7uIg3dvvH8SQRh\n8iIJCyOE10D4lHpUI4TXemnFgWKKCopSxNhggvaHogK/NYvRjvT2UHWV8PR8KCksobO303Ybt5Id\nu1uaHKv+vzvdzz2fjPH6x/Ooc+byGW/feztdfV0pn2moSmt45ViREfPm5ZjHiuBD9wzEvLnJAw30\nKeiYat/Rwe64dmU2hpIY0FUI5zgkBk8kuaMBNUmeAYIw3pBsU0ZfvGUTSHkVNh0icsmwDBYF6env\nSbEipgska3Fht2W51ARzI93l+0HvB/TGevMWll76k4406ULVPK+DKQPilTiGxQmyH/OMD1ZdM3B+\nH90HNYeMjFS7bcwyKE7XqrvAvU3XcJBPlq7GyLZNL6mSbRsTu22GIlvYyxxEvAnC2ESyTccAdm6+\n4kAxTcua0Os1rXe1jlott1wyLE/0nGDFghUpGaSmSyk9yN58IFuzIr+5dyD4f6g+rxnwH18f5/ja\n40n3ZL7ZoE7u0Na1+cXnDQXheWFKCkuSv++eb8xzuDFr9u2eP3Cdw8syz4/GsJJZhRsY8WPvnGsv\nQuIMfIYr65v40nXBZKJAtNToapBLrN1QkY9gOp6wNuYig5TlZUec4XMRC4IwvhHxNkKE54VZsWBF\nMrvSr/ysWLBiTBTfzSV+rLy0nBffetGTpS6beDLjzBY/NbTlC0wxl282aHrJjnem+5LtrUYTa7yh\n2WR+OC0zZreC9G4Z6eenfVYJr3+lhvPu9dtaNN3O9+75Rl2+8Lww/cuvY12lYaG9sGOgG8JQfp70\n11BR1gPx+qGdrw/nYsNDhYhDQRifiHgbCSIROs8v47GrtvL2QzGWtxj1zXb+aueQNmrPl/RG68Gi\nINMC0zLWM7MjvZbpcHpoh9LGm480M+XLU4bkXFz8+MVJUegU2O8l4H/3fPhEfYjdLU1ceDI2pMLN\nWifPreH8gU21HJ1ZQFwpjs4s4NZfDwjszS9lNpkfSpyEm8n7SyupOKXxaU3w/Q+47N4t7Lx2J4X+\nzGZa2a7Dr4//msVPLebU9q0pltqh/nKKKfDVD7yckm3yIZsVLd99uv0+WDQD7nBBEMYXIt6Gm0gE\nqqsp+W17huuwu6+buua60Z4hkOl67FzXSdOyJtvsSK9u1rjL0+b9B1JrqPXGe7lxz40pmZ8F9xdQ\nu792YKOECI4rRet0xQ2fNV6t05UhcGYUsODVN5Oru2WDulGzqGbYXNnpmb3RjijVe6szBNyBTbVc\nct9WZp+M4QNmn4zx8J6upMt5KN2JmgEXnen+DC+zF25m/buXVzRzdEaBcX9bsCuObHcdNDCzx9if\nRtN8pNnWUpvr53CyqmmMnrvW+n3Teo3WX1b61OSwRsUxrvH7S0fA9y4IwpAjCQvDTUUFRDMTFcxA\nbYUivn4ka7gPHrfWVFa89mT0kkRgF9B+xgdKwRRL6bz0fbklTKTjUz6euvapYXVlOyWupGfeHp1Z\nwOyTmTUBzftmKFx0Zismt3NixSmp4M5rCvn2xZmizXrunWqjnfXDyqXG8QfTwxMGsoEBOm9dwS0/\njyXbcm1baNRqs7uHPphiNJgfrfptI435N/L+0kpeuemV0Z6OIAgOSLYpoyjefD6wOcdxjAD/wZbL\nGC28lOlwytq0I735+nDuKxvDmfnrlNmbLuLjSjmWK/HXQ8dGONe5x31Wcu3BCs7XwO5851LOxNw+\n2zXOWiIkFILW1uSv6f9kuM1/XSVE9rgLN/PqDLV7dLjQGMLVFLA+De+Uwjv3jn78piAI2ZFs09Gk\n3N7F2FZqFHxNLxw7XgjPC3N87fGkaxXI6GG6rtJ7X8hsSQQ5tZwaRAcCwNGVORQ4uZzTx9+bYd/C\nSGG4nL369s76DTdoHOhX7j1TQ6UhmpY10bSsybYrhlsCyKP7oG+DYRHs2wDbcqhDZ+53XaVhCUvH\nKtocRZNNK7n0WE63+e96znnfplvZevzxkAkaLYWp9X589fDhh4z4zdApLcJNECYAIt6Gm4YGugOp\njwUz7urcKeeOiWzTwWDty7lr2a6UGLnpq2r45kf8ngRctiSCXLoKDEUHgu6+bk6uqqLfr9BKQUEB\n1NZm3zALTpm9nb2dKWKxdW21rZAxG8Cfk0UYaeB0oeGS/NA9hrUusB4+9ECQi9cWpwg3s2SNGeNn\nFebWxBWn83rGl9mAPtv8rJj73T3fcGHafeZsn5UVK7J2JHESxODeysvsDWpNSjAvjVtniFGluJiK\nx5vov69/1EsRCYIw9Ih4G27CYW69Wqc0ujatHm4ux/GINemh9a5Wtly5hdt/1s+3/6aSaOLzHyvK\nDBL3kkRgF/R+xpe5r+6AGpL6Z2Z3gIJ4QjzEYuitW9n5sRJ8G3x8oaqMzvPLwOej8/wynri0IJk4\nEZ2u2P7FxfztzRckx1qnK/725guS1qB0y1Z7T/uAtS8S4bKvPcsUF9XrZiWKKSNTtHRdqnUt4Auw\n+YrNKdYopzZdYFzPznWd6PWa80vOd7wGRfH8MyPP+lOvfTCPRAwFsHNnRvJEenLI838Yy/hHIk7+\nX4JOlkANHJ8y8gLOtKy2zyqBxpHriywIwsgjMW8jQMH9BbYN6f3KT/99o1OxfzTZ/sXFfOrJ5qxJ\nBAqVEh9ml3wAA2Pd5wUp+erm5EPL7LyQawN7MFx/BTZ/Gv0Kbro2M54rvRp+nxqwRJmc9cPfVZ3P\nV7/9rmPiwuffCvLQdz+g4Ez2gLb0Y7rFsU0LTOOJq58YlPWldn8tHdu30pA43/FEPJWbkLQuO+OD\nXv+AVe54Eay5InW+ucQ22h0P85hKsfNPi7n500ZbMdsYPKXQWg9L/NpIdEdIP96NyxTnrlqdd79g\nQRDGFpKwwMiIN2ubpvLS8mTQu9rg/DWu10+O8++EXeZqcaCYP539pzQfydIKgdyzdWv317Lt4Las\nRYadsjnNDM18BcaxIpjVrR0TF3IRL8eKjB6c5R1GIHrzrZWs+torjvfhYKjdX8vWg1sB78kI5rny\nkulrYrfvfIWQtVad03nt9xnW1fFOHPBNku9yQZgsDJt4U0rdDdyK8T15GFgJnAc8AwSBQ8CNWute\npdQU4ClgIdAOfE5r3ZrYz5eAWzB6Qn9Ba/3PifHLgc2AH3hSa70pMT7H7hhucx1u8WYnCkzLkV/5\nbS1v4zXTdKhJFxsfnvlhT8IN8juHVoucT/mI68ynt5vlzafzd7Vp4NyNJXT2dtou91ouw+whOhzl\nHiKHI/yo4XbWfb8rKQy/ZBFeXgWmmRnrRKg0lOxHC0brtfLScprOLOGybS+i26K8O93Pm9NjfCoK\n/jgovx+mToWuLk+fpV8ZsX5O5zUO9PlTy80Md+P7oUYD/zEL5r0v4k0QJhJu4q1gEDu9APgCMFdr\n3aOUeha4HlgCPKy1fkYptQ1DlG1N/Dyptf6wUup64AHgc0qpuYntLgbOB15RSv0/icM8DvwFcBT4\nuVLqe1rrNxPb2h1jVIgcjiStElZMIWcn3MxuBQLJIHmTgvu93Zb5nsP040GmBXDbQiPmLb090baF\ncNVb+VveAEfhBoaFymnf5qPZdDe+fGmQ48Mg3DpuqWLbzwfETihRWBoMAec1mzdb4oir6L7XOPez\nE6/USRqFr+l2rzMIA4kITudVAYFY5th4QgF/fGy0ZyEIwkgy2ISFAqBIKVUAFAO/BT4F/FNi+U7g\nmsT7pYnfSSyvVEqpxPgzWuuzWusjwNvARxKvt7XW/52wqj0DLE1s43SMUWHNS2s8redX/qxB4kKm\n2LVWxTc7MgSLgkN6Dq1lJQDuutrP44sMt5oG4j4fjR/x8fmrnDsGeOF4UWZZjUf3DSx32rfZ9cBX\nb2SPvrCwmM1XbPZ0zPR2XLX7a1N+P7Cp1igm7fNx+Z/cyOqfZ34xWHvSesnm7QrA0Xtrkr1803Ea\n90Q4DI2NxDyoLI1xz5R32F8ja+aoIAjCeCFvy5vW+l2l1NeANqAHeBnDhXlKa21G4R8FLki8vwB4\nJ7Ftv1KqA8PteQHwU8uurdu8kzZ+aWIbp2OMCl6zRuM6Pu66KYwGVjdzegxURQc8uReKl22GIRa/\nGRa5+wbeKqDkcIRQcx3PzG+jrGgmG1+Fkv85QefvzyRy4Sk+85sY5R3QXgSlPZDe5bNPwb//fqpF\nr0Abv4MRm2W6Ju26Qhh19HRORYQjhyOsfH4lfXHjBEY7oilW4o++FuWSvVshcX6DLsYsaz02t04F\nZuLIZeEw1fuxtUpXL6zOOnc7rMkuXixkisFZSQVBEMYig3GbzsCwms0BTgH/CFw+RPMaEpRS1UA1\nQLlDsdyRxGtP0MlO9cLq5APfrt9lcR/8bs2t/N4Il0Kwc7cClAC3J95f8PULeK/zPZa3GM3jzR6k\npqvzKZtisApYfWigl+ju+fDsAkPAmkLWSbBFDkf42QNr+Ot97ZR3wMlZJfztJ/o4EzvLxmZY3gEf\nc0gWWN5izMcuts8Oaz02SBWYf1c5kOlYYtnGzHxsPNSY/DzVC6vzyojcuPpi1mx/M6f+p+PNBZoP\nGvj1gvOZO9oTEQRhxMhbvAGLgSNa62MASqk9wMeA6UqpgoRlbDbwbmL9d4ELgaMJN2spRuKCOW5i\n3cZuvN3lGClorRuBRjASFgbxWV0JFgWzWt8kxs071gd+eUdmvCDArPYzIzklz7z7N+8yY9MMds8/\nZZtZGdljv521SGxxoNiTSzhyOMIrX17JY8/3JQVN8FgnW76b2vO1Ii1mDQYsml6FW5zUemy75w8k\nS1QATS7bbrlyy6DLV0QOR7jhmdyE22RAA0fPgbm/tP0KFARhgjKYcI824E+UUsWJOLRK4E3gX4C/\nSqyzAngh8f57id9JLH9VG6mu3wOuV0pNSWSRXgT8G/Bz4CKl1BylVCFGUsP3Ets4HWNU2HzFZgp8\nzjp4Use4RSLJeCoqKjIKqTqx5cot7Lx2p2N8VVsp+O/3U7LRKJpbsrEEtUFlvMoeLBuWNld2HNhU\ny9GZBbR/6RTRRxTLWzLXcYrTMsdzuVfqmutY/3JfhqCZGk/NnoTUmDWwt2g6EQd+vGQuT39Xo9cP\nvIazqfnG1RenFDj+5w0rBt32zI04qS3E7IpJjzU08KMPB7jwtGSZCsJkY7ClQjYAnwP6gV9glA25\nACO5YGZirEprfVYpNRXYBVwCnACu11r/d2I/dcCqxH7u0lq/lBhfAjyCUSpku9a6ITH+B3bHcJvr\ncJcKSW/UHiwKsvmKzZNTsJnYZQUWF3uu/l7xSAUffS2aEV+Va1P1gC/Ajmt2DFyLSIQPVlZRYtnn\nBwFouT//ht0HNtVyyX1bU+ZpRjda49a+vxM+fSQzi/WJj/j44tIiuvoyS2A43Uu+DT7667Xn/8DM\n/pwmTi7FWKCAU4EYM7o1783w07q2ekT7YW5cfTF/8+SbKQL0rN9o9zXLpQPDWT9obYhXE6caceb+\ngj2ZNeiCRUGuu/g6enZ+i/Uv91LeAZ2FUNI7+skN5rd1tBReTdT1EwRhYiJFehndDguTlooKiNp0\nNwiFoLU16+ZmIVu7zgpehVvykGY9uEiEvhurCNjc9n0K7rhuGt/8313JWDOzjdWJnhMp9ciKA8VJ\noeUldqwrADsWwMpfZRag/dGHAyy+MW5bUsYkQ4BiiNsf1kc9B+R7KXYb8yn8T+0a1dZKx4qVrUg7\nHTD+i7MTyCdnlfClT2k6+7pSO25ccx2dzz9L8W/biSdq9L073Uf0nttTBKmXwsYHNtVS8WAj5580\nrpMXIWe9JYYi/k5jZBw3LWua3P8YCsIkQMQbIt5GBZ/PMIWkoxTEs2fdOrWQyodkJwYnQZmgtRTm\n3J19f1ZBCd4e5P3KXuAdneHnwjXOws0kvSCxXcwbGJmf1pg38Cbczk4pYMq3vj3qPTG1Uo7dLcLL\nMoX89FU1g4qpc+ryYeu+jkSgrs64h/x+o+ctzt04NENnrdPAwbnT+T9vnByiPQqCMJZxE2+j7QUQ\nJjJOGb4eM3+XXLRk6KZiZvq2tbmv58GKZQb7V3QYf0Be/4j8Dv8nmZacbLR1pM49PC/M4r/fwZeu\nC9JaOtCUvPazU1i5lORYq0tdNs3AOiuv7Ee9XUXFIxUjFieYQW2t6+KXLw0y526jc8OidUGurG8a\ndDJEXXNdinAD6O7rpq65LnVFMwzAFP+xmBEG4MBQ1pDTwPvTAyLcBEEAxPImDCdDEPM2FJa3FJfj\nEFje8m2ePtSWN6+oDcq1V6uv3n47q3XRrN02rFa52lrY6twoRQNqGL6vnPrMZvTNdbh3RqIJ/QeF\ncM7ZyfFdLQiCgVjehNEhUQmfUMjw44VCnoUbZFqa8iFYFEyNFWtooM/hSdunUsthLG+BjgajE0K8\nHvoT3RC8WOfSH7NdAaO1Vnr3BIqLaV1bnbXjQMAXGNFSM+nWxZLfttNfVYVWKvnq9itu+Gxmhu/i\npxbnd9DGRtfFKhjMb79ZcKq/mDGexWo7XMSBX22oGZVjC4IwNhHxJgwv4bCRnBCPGz9zsNzkUtRY\nofjWB5XoHSH0BmX8/HATx9ceT41bCocJ7Grig8BATJLGCIa/5bP+lDpoO5+Dc/sMq4rCcHvecRA6\n0wVYGl0BeHxRqtuy+mqjCO+XrgvSeV4wRcxedq9RFmVaYJrt/jIEaI5Uzqkk6uA6dRq3KyVSwMC5\nUEBxHJ7aQ7Ikitn26wcrmon5VdIFmt6ey9ElG3O2PsaAA1+8znH5YGiobKA4kOr+LA4Us+SiJcl5\nf6GqjLiyV/3DaXWLA/91XeWIZvsKgjD2EbepAHjLthtpDmyqpfyBbcw+pbNmmd78RoBv7lUUnOkd\nGExz0Wb7jLX7a9l2cBsa7eoajSk4U2Cf9WjO89kFfnZeu3PUz6HJHTfM4MF/OuW55Eqs3vt/dq2l\nsO+i1LZfMCCMtywa6B4BLskABQWOAk4Dr11UyJ/9l2tFoLxIL/Njkt4lYyS7NWjgbOk0pj7+xKgn\nkAiCMDpItiki3tzIKdsuT2r31+bWIskmXs5NbDiKrURZEi+f0Rpj5yZenLIed883rE+rDxlWupgy\nXKVW4TKY9lCeMTMi29qM5JCGBgiHU/qCZhPDucT1xYG4Qzwf2Is42/i92lr01q2OIilbzJubOE8X\naMtb4IFXfczuiHN8qrF9sMeo5zbNUs9tNNpraeC9S+dywU/fGIWjC4IwVhDxhog3N5wSA/INkAdS\nBER72TR2hzq56q0cSjw4BIc7Bfc7iq1EWRIvn9EauN63wVmM9CsIrM8cf3SfvfXp8YRosatX99wl\nU3ly6ZNDZ6HzkCRiJ2TTMWPevHRhaC2FkIdG8Rp4eQ5cvsImGSDBf35uMf/r2WbH5Aon8eYmzgFu\nfv5m/u8v+9nYbMwVRrfvqVt5kZN/eD4z35Z2V4Iw2RHxhog3Nzxn23nAbJT+lWfbM4rRWh9WphXt\nJx+3b7juVCMujlEmIp1sljenz+iEkxi0irF0nASfxmhMf87Z1Or/VkvikHXk8FAY2U3INlQ2cNNz\nNxHX8RQronn90gWHBlrKYP5xb2LIPBdfXhbkG03H7ddxqfP2FzsrbdtyZctMzkWMjgSnEx0b0oW+\nr6YGtkh8myAIkm0qZMFztl0WTOvHX+9rz3hIpj+MzV6b0Y4o1XurM4PYHWrBOfU63fDpAP1TC1MH\ni4sNlyG5fxan43wQsBdu4FzHTWG0dZqapoOn9RmN6uP18D/3ttN5602Dr6/mlBFpGbfL4l3eAj+s\njxJecCOnvhago8GwIhbogXplcTXgArV+Nq/CzVx/Vg88FGn33OfWSvORZi74+gXU7q/lhs+qZP/T\nH9ZHbXvJmuTSy3W40cDqq+APHg7xdEsTSmuU1vi0FuEmCIInRLyNZ/Js+p6OU7ZdrqUpzGKnXhuI\nm+vZFkRtaMgogNoVSC3lYRIqDbH473dQ8OR2x7Ikdp/RyvIWw3oXqzd+7rsos6xHVwBWX22//vIW\n56bzbpjWrAIN1f8W57xrV+S+Exi4F5ws6RYxnC5krWVB0JpzPjibzLK1YsbxpY/n434sAE6vrEJt\nUJQ9WEbkcITI4QhlD5a52kfj9XD0i+/x+FVbiewZKGVS0WF8huUt9tdmOJva58rxInj6u5rWu1rH\nTEKLIAjjDK31pHgtXLhQTyiamrQuLtbaeFwbr+JiYzyf3bU06dDDIa3qlQ49HNJNLbnvR9UrTT36\nSCmp83J4HSlFU49evsx4H0uMfT4cNI7f1KQ/OC+YHF++zFjf+lL1Kq/PuHwZ+v0idJyBl3VunQH0\nvyyZq6PTVcbxly8zlqev//05mfvJ9RUH/dpXanI78Xb3gst90dTSpIsbipPn0Ov1Muc3mM+Xvq/3\ni4zz6av36YL7C/TyZeg+lf8+3y+yvzbvFw3dvAfz6s/n+gqCMCkBDmoHTSMxb+OVQTZ9Hw7MuCO7\n+CKNfcwbZK7bFYA7rwlQtOJWvvWLb9Ebs5T/SCOfpIqNqy/mb558M6X3px3vTPdxoV3rKodz3zZd\n0f3pT/FH3/0hOhbLOyD+6Aw/s0/0e9/ArWuEWdj2xImUzFNrWZRcyoI4dYlIx1zFyzk464eVS433\ng41LS7/PTLp9UBTPzUrotK985gTQC/z8KzVSs00QBE9IzNtExENs00hjuiZ3zzeEmVmktvO8IKqm\nBkIhtDJEjhmobxeLNK0P1r/cR+OhRlfhBvDO6Xeo3e/eD9PK4qcWc+f27MIN4IJTDskaDue4vAP+\n6DuvQH8/qqkpw+171m8UA86mfbz2Os02HwBOn4b2dsPuE43CypUQifDiWy8mEzic4vvScewSkYbG\nSOoIL4NjRdk/75SYEfv31HPDF5c2msLtK7fPRWnNFK1FuAmCMCSIeBuvDLLp+3AQnhem8epGQqUh\nnpmv+ER9iN0tTZS8d9wIxG5tRcU1r/14V7K+mFMsUnkHxHR2ERPXcbYe3Ooq4O64YQbHio2WTj9Y\n0cw5HgVCWyn2XQG8nHub1mBTdjZx7vmhrKLgHY9iKtt8YgB9aR+2rw/WrElJWlhX6S7INIYIuy3R\nJcIU5k6izEzq2D0fPnSP8Xs2zLi/weJ0bkdLuP16wfms2yb12gRBGFpEvI1XbAL6rdmVo0V4XpjW\nu1qJr48nA7LT2yO9oKsd7QAAIABJREFU3vZ6spenk9XHqzXIpPFQoi9mWhLHK3+oeHT3KWb1pLZ2\nyobGEDUaTbQjStWeqmRgve25B3jnnWRLKADCYSJ7G6h4qBzfyjZKorcTd3JvWo476wNYed0U75mn\nDQ0QSFVIGpc/7vb2lKSFdEspwSAdJQXJ1l7hZYYIMwX37vkw525j/IzNQc7pMxIL3n/ASBZYffVA\nB4rxwFDWf5v7S6nXJgjC0CMxb+MZh0r6Y4lsBWHt4uPcOim4oT/clFGgNl8ryukAlKYlwFqL7LYX\nwbSzme44Dbz5ITi318cFp+IZnQy8di7Qae+Vw3sfGHFtHR3Q7z1OLtLSlLXjRO3+Wp449ARxnSm9\nzHWv+5NbCXSfcTyOGc/20TaoPTh5/lvUwI8+HOATb7m7/QVBEJyQIr1MUPE20uQhFrMVTwX7zgO5\nCje/8tO/fbZz4H6OpBcD9pKE4TRuFaPLW2D785k130YSDcR8cODyudz8F11EO6I8lijI60t8HXwQ\ngNqrFZW/ncqNP+3JqGFn/YzZxHFrqWGpS+8V6mXb8YT1FIlwEwRhsIh4Q8TboPHQdskOr50NzG4O\nXsSeHZVzKnl5RfOQWXZMwWGSS6/PbPuzipjRbtH0oyVz+c3x/6T63+IZc4nj3c3shlNXjI4GOHeM\nFM7NF514mf90vL/UvgOEIAhCrki2qTB46upShRsYv9fV2a+fwGtnA3O9bMV07ZhbNpd/PfqvOcfJ\ngX3QfS+ZxYAHW+TVur0ZyH+8aHD7HCwKuOylN7nl55nCDYwvh6EQl22l9oVzvSaOjBY6y6u9WPH6\nV2rwaU3FKc3T39Ui3ARBGBFEvAneyLM0iRcxZu3mYM1YVSiCRUEK/altr8zOl6HSEE3Lmujq66K7\nr9s2a9LJ5qcxLEItZUbXAPOBfDoANy/LdNvmIwyzbf/vv5+9jMZw49fObb2GAg3M7DFcxdZuCNuf\nH75jDhXWBJe4MsS2ZuB+6ZkiX5+CIIwO8u0jeCPP0iTpYixUGqJmUU3K79YgeXMbM2P1+NrjbF+6\nPWX9Xct2odcPtBcyy16kZ02abj87oqVw574aFhzT+ONGb8k5D4corbOPt8tWTsNKuhY648u05PmV\nn8WtQ+g2DQQgGMxZDMZUfm29vKKAc3szY/ym5lh3bbTxa6Mnqw+jpIkPmH0yxiX3bWX7FxeP9vQE\nQZhkFIz2BIRxQkODfcybh9Ik4XnhQfVwzLZ9eWl5SpzczG73WK2uABy9t4YtV6YWTLVr2G5iCrrI\nHuckBbA/bqFFuMwtm8sbdxh1v/R67/JFW35mZJuGQsnkkZhPOdZLS0+k0MCBK5xj3oTsTOuDmx5q\nZjuLWfU1cZkKgjAyiOVN8IZN0dlsyQojhemaXd4C396DbVN1E41hnfuzs9syiu86xefdkIjXatoD\nHxTauzrdxKIP2LbPeN/a0UrkcIQ3/98LXD+T1T1HKIRqakJpjc/oaZd8j9YcWL2Eo59fQVwpVxeo\nVfRp4OU58MmPvMk/3vFJnvrotBT3cbfPKPORPifra7wzVJ+hQMPnvtHMgU3eO30IgiAMBsk2FSYE\nkcMRLvt4FaEsiQVxoMoS02atbZZek+7RfVBzMDNwP5/acRrw1Rvvf/kYzD/uvg+zzpxj79ZE2Rad\nKI2Sj9UsDmxZBD8pTy3Vsu8iuOotkufSum+zbts9PzY+Q77HHgvk0n/VC469cAVBEPJASoUg4m0y\nEFfKkyk5vQyIVSDV7q/l1PatbNtrZEMO1YPdFG/LW5xdr3brmyVUUrAr2zKIeUFu4vRYkZEtC+TU\n1H6iEwfDGioIgjAESKkQYVhIb3vluZ3TMPHeDH/2lcgs+9HW0UbkcISSjSWc2r6Vb+51d73my5GH\nvQk3K7auXLuyLWl4lRB27t5s8yvrMdpfxevHr9VtOBhsRrIgCIJXRLwJeWG6GKMd0WT/z+q91aMq\n4FrXVuOlpn36Q1aj2V9fxX882EVkT2oXhVxxE00VHbmJne/vhAMbjib7tBJJnNss5VnAOM5w2YBU\n2kswkmA2Xj5ttKchCMIkQcSbkBd1zXUZ/Uq7+7qpa3Yv2jucXHbvFpr+ppKzOAuXOJllO8zWV7mK\nKzvsRFM+MXIK+PQRmH0qBlpDNErXyiq+UFVG5+/P9LwPwTv5JGJoDDfy7Vcr/rzuiWGYlSAIQiYi\n3oS8cCqr4VZuY7iJHI5w2zn/wtR6o/iunYg6Y3PHb2wenLUtHQX0K0MoHvPQRcFJNKSLr2l98Nf7\n2nl9avuEyPYcS3QFILzMqP/nFTNj93/XB7miftegyuEIgiDkgtR5E/IivbaadXy0qGuuI44R3F9q\nE7OmgOK4YWWDgYzTbK2v7OqjZbNq+XWiu8CZobWAhTqMl1jVBk96X1LzftjxAkyJZa5rx2dOBzl+\nwWYQ4SYIwggiljchL+zaXlnbXI0GVqufmyCb1mdY25LbOVhbNIYF7QdzjDIQcYxM1ccXDXRx6HdQ\nUQrjj2uoW08NR5zZRKnb5oRdX9JjRfCV2+cm+5IunlPJ+w8YCSWFMePaWtdPj/NLXof2dli5ciAe\nURAEYQQQ8SbkhV3bq/Q2VyON1eqXLfPPKu6cWl8pjAKsHzsK93wqjr/eKDHy+auMn/56uOnawQuf\n0Qz81xgu5uNTJp6AM4XX44uMsit37KtJFjie1a1Zt+0NFj+1mF/NUqz8ejOzegauhVnbz9O16esj\nVlXF6UKFVqmv7gLFxtUXD+fHFARhEiJ13oRxS+RwhLrmOto62igvLWfJRUt44uATxIknkxCcYtnS\na70tbzGscU4uyfT1rYz1khlubl7rX/9Y/gy5Yn6ul+fA7V8IseSiJWw9uJXlLUa3i3PS0pKH87Ob\nc4kp8Gl4pxSab62UdlqCILgiRXoR8TbRSO+GAIbbdsWCFTz1q6fo6utieQtsfsmoS2Z9OHcFjBZZ\nZoxTsCjI5is2c/PzN3P2vn5bc3Qcw9JmR98GHPuJCqOLl0SQ0aArAN/5ggg4QRCckSK9wrATORyh\n7MEy1AaF2qAoe7BsWGu+OZUqefGtF+lc14ler9k93+gE8PgiIzbNjGHbscAQbgpFzaIajq81+jz1\nx/sd3a1ubthtCyeey3GiYBunNgaY1gcrv95M63TFDZ9V+Db4UBvUmCh2LQjC2Ecsb8KgiRyOsOqF\nVfTGUn1RAV+AHdfsGJY4ON8GH9pGMlnbSVV91sfDL2lHy9v0VTVsuXILABWPVBDtiNq6W831YcCS\nB3C8CNZcYbzPtXOCIJiYzc/MrNcXFhr9dl9ve53GQ43EdAy/8lO9sDp5vwqCMPERtyki3nIlPZ6s\n6cwSLtv2IrotStu58KVEaYVpgWlMLZhKe0+77X4cG6vnPTGjIXs8Gs0o8WAeb8lFS5Jtrtxi3j5R\nPzA3qxg049/MRu1mUV+7EhL9wMkimNUzdB9RmLxYhdy+i+Cqtwbuw9/MhMpWI4M5pmDHRwLc9lMv\nPUUEQRiPiHhDxFsuRA5HuGnPTcmaaXbWKM2A5ckqntKxbaye98QyG7Jb49eKA8X86ew/pflIM0ce\nNjomOBEHCuoH5mZa3uwoKSzh8AOdjvvLp4OCMLHQwAcBOMfmn4V8741s9QU18OaH4OLfTY7vcEGY\nbEjMm+CZyOEIVXuqksIN7DsQKAxr0zf3GuLOiSEt2mvTkN2s2RYsClJUUETzEaOAW7bCu22lqXOz\nq1sHUDmnkq7erqz784JdvTFhYhAthfPqi3m6pYmnW5oo+vIUfPVGvGW+/7rYFZlO/33u+0BtbZ5H\nEARhvCLiTUhixq6lk0vBWysBX2Boi/Y6NGQv74ATPSdSXLduCQZdAairJGVudnXrmpY18cpNr1Be\nWp61bpxdnTg7Hl9kPOg1cMYvIm4s4/XadAXgoauCNF7dCMCqF1ZxNnYWMNyew/klqwC9dWsy8aHw\n/sJhPJogCGMFEW9CkrrmuoykA/BW8DZYFCRYFEyOBYuCg09WiESgogJ8PuPnTPuG7G2lZCQv2BXe\nNSvr33Y1PLPAx417bqTswTLKHizDt8FHXXMdDZUNxNfHab2rNTn3hsoG1lW6NLtXxj5bS90f9gqo\nPWi4c31AUWxsZUAKqaRfG7teuXGMf2C+caCEcEvm39BQWGy9zLOiw7CC/9Wv+kTACcIkQMSbkMSp\nqbxTB4LkdqVw3cXXcXztcfR6jV6vOb72+OCFW3U1RKOgNUSjxE53ZDSW7woMJBRY2T1/QFCZba3C\ny4zSIbvnQ1zH0Wjae9pp72lHo4l2RKnaU5VR5iQ8L8zLlwZ5eY79A3zrQmOfc+42hJwb8geXP6Nt\noVRkuryT1zMapXvljXz0tdS4yWz/+AwlphW8Tztk6QiCMGGQhAUhiVvQvlPBW+uD7L0ZflrXVnPZ\nvUNQzqCiwhBuaRwrgq7C1ExQt4SJfCn0F3JO4Tmc6DmR7N6w81c7eeC5blYfGsj427bQaJdl8ug+\nuOOgWNPcsH7jxIB+H0yNZy63O4dx3AVwrkV5hzrZJL0Tx0jfD2Yi0YPXnc9Xv/3uCB1VEIThQLJN\nEfHmBad6bQBT/VM5EzvDo/sM15/TA7QrAL+4v2bwAs7nMyxuabh1OhhOzO4NZt0tN8Z6u6zRwNoi\nattC+En5QDkW8O4+NjWe0/0XU1CwHmp/M52/ffEU5R2gE22pzONY9zXUllDzn5n2IpjSb2Sfjsa9\nYD3f3760kNsu78Wv/MR0jFBpiIbKhlHtQywIQnYk21TwRHhemO1Lt2fErjUta+LJpU8C2QOwp/VB\nxYONg59MuX2WqpsbSiUek37lH/Thl7fAkYchVm/8XHqom2ffeJad1+7MyEpVItU84auHm66Fz71h\nFDU2Y//MJvBe6AxA1TJnF6pPG+L5sd2nkvv3a+gOGMkiVjf6cGA2tZ/VA+eOknAz56Ew2rbd8tNe\nOjbCdb8y/umIdkSp3lstnRwEYRwjljfBM/77/fStj2dV/HHAN9j7yqamm1ttuan+qTy59EnC88KO\nfU+LCoociwlbWd4Cu54zHvomMQU3XgtX1jcBpBQwbqhsYMcvdiTLlIyG5S39bI81OWmd32DmFscQ\nb/l0tDhWZMQ8gv01tjKStftMa6JK+znUpPf0Na3pJpVzKnnlJum1KghjBXGbIuJtKKjdX/v/s3f+\n8XGVdb5/PzOZpElL05IULwUzKbte97a3RW1YUHH1moogVLAo2k5oAbE0KVhZVEq7a1PcFnBdsUKT\ntmChOEPRXSrYFhQJ611+rK5llUS668W1SUrBpQltaJO0SWae+8czJ/MjZ37PZGaS7/v1Oq+ZOefM\nOc85M3POZ74/+bqnNW7xW4DXZzo59+2RjPf3wt1NvPfO1oSN5edWz+XV1a9GvDe6Q8Sm+k24979I\nzT3bOPe4jhsvN/BNkwkajQbWeKr4nrcn5ph9HT6qr2zgkkP5c5dpJq5JXWOSQmKJrkTv9Swxz+26\nZeQDa0y7F6QeH5eOwIyIN7RxYVu/i7euFCEnCPkmnnhDaz0ppoULF2ohc75/W70edKA19tNJF/r5\nuxqzsq9pm6fpQ5X2+zlUiXbf69bedq/WWmtvu1e773Vr1awi5o/i9WpdUTFmrEuXoGk2k2pWmmZ0\nIMaxaTDH7vXajDbE7G/P1p3T4m9HpvxMhyqJ+Z3K13hoRt9Xl/r3JRvfrwDoIcfYeSOgd1zoysrv\nWBCE9AAOaG2vacTyJqSOzwdr1kBv76glROnsZps27W+i9UAr/mZ7K5LlmvV1+Fjz9Jox7tAKl2nu\nPRqUHSN71coODO9nmjB43u2Gzs6445+3dR6PNh9kQU/huTBjoQm1eMp0zOFXlUI6fh2ccpGokOpx\nnnbCO6VQNZj4O5fK9tMZS6ztPPnx2VzVJlmrgpAPxG2KiLdiw2oUH6tH6X9XTeHZf35wTGxbOO7K\nUOP5eNmrveVjS6AkJMnfTcsFilVxXGGFJmwst6JdWZhUtgPBzM8kLy86xfUzIRdZpqliHWai82uJ\nzZ/Pgfe+De6+xCJvCChNYtvJMKKgJDA57hGCUGhItqlQdFgdE+wKBAeAWb2nuOTCBjr/bmA0IzS6\nx2pE0eEY2atgMgNTutE5kv/ZNP1a4zAm7ojJ2Tz+sk1jzl2sW7HCWB93LzC19NIdYXimYzL0u4xo\nXP4Z+64YibAETrI4Ulw/FyRbGsWvTGmcS1dE1o+Lt903s5hJ69RIVqogFCAi3oSCJrpTgmU1scox\nzBo0z632QOECLrzxPJs2MeCKvF2mbYEJBIzrOA1euLuJwzOdjDSPv3ywylicdsQWL1bdtVy2dQpg\nMj+tkh1W8oldV4ytdcbKilJQVQWlka2f+l0mAzmdwP2j5fkXcfHQmISCcPxJHKg7y5/dmqfXZHeD\ngiBkjIg3oSCZVjpt9LnVeqq7MnGNuc2mWgcVroqIxvN4PPz7natSqvMV98a+fn3iDYTj8zFSWsKH\n72jl3ccDo7XN8iEepgRit/Gy6ujlqq2Tdbz9pabkx5xbIzN+rc/a2Qx//tdODjY38q6eQVi1isCx\nY+ihoVFLmyX8qgZTH0dvsFPHeJPo87aWjziMcA3v3gFGzCXaRrb75fYO9or1TRAKDBFvQkGy7Ypt\nlDhKIuYlYw2q6TOFhSOSFYJcvLaFunVVOJtDYjAW/cGirjFvlN32fWBt8flg+XJKhv1jbqp5K+Kq\n7d3R7j5Tp+7MQcb0kY1Gk7rL0rL+1faZWm2BZjO9dU/IaqpQ6A2akW+M0HJ5C0cumodubcURCEQI\nk33vMWIvVaGpgelDZgzjef5HMFbCWPS74MW7GkFrfvhbL7d/Zmwx6FuuMN/LEZXauU/1cwrnt/eb\nuoaCIBQOIt6EgsQz38PDVz0c0e0hmZv0kRkOer7eE7P1z5bLtox2SLCLp9NAb4XiN3c2cvOvNaqq\nauxGIG4MXTR9N11nXK05IN2bcm+5vTvaEkfTh8AJDDgiRZo1HS03cWqOZvMYvp1kUWHTrEHY+YQR\ncOHu7hfubmL2rw7ait5VL5vndp9jIsarxpsVZ9hZCcuXmALTdt+5o+Vw65Kpo5nanvkedizegbvS\njULhrnTzgyU/QG/Q3PxrTUlAM/Wb5RHnPt73wDp/qQpuBSzoiYofFQQh74h4EwoPnw9qa/Gcfy09\nLdO4/tUyIPFNut8FXbffFHfT4TfFxxYo7rimipNnV5mYKrcb5fVS1R8IlTvZsgUqIi0gVFTApk1j\nNx7Gzq8uomuGIqAU0/szL1gcj1PO9KxgidzRrgCUByJFFphyIlWDxkW9tN1sZ119SFyna+GZEoAf\n7IFDt3ahlQKl+OC61pjWMatQb3Ss3IhKLGbsyMQ6FQvrvE0dglKHi5c+4h4T1+dZArV/U8FH12+P\neK9nvofOr3TygyU/AODaPddS/a1qqr9VjWOjg7OmncXlzV4u3zQXZzN0JfhzE/05poq4TgWhgIhV\nAC6ZCZgB/BPwn8B/AB8EzgR+DrwWfJwZXFcB3wP+ALQDHwjbzorg+q8BK8LmLwQ6gu/5HqHSJrb7\niDdJkd4iIUEx3aVLTGFTP+i3ys3kB314pjNrxYFtx+R2a62UeUxQpPf7t9Xrk67xLfYaAN3vQL9V\nZp5bU6z1/YSKE/sz2O9JlykwG32841GgeFiFjiF8Us3KfBBut/17nU7b+Ycq0xt3su8JRE0nypRe\ntgT7otLWV6/dqys2VdgeJ83oik0VowWqly7J7LNMNO6+0uwV4BYEITHkqkivUmoX8LzW+kGlVClQ\nAawD3tZa362UWhsUVrcrpT4F3AJ8CrgQ2KK1vlApdSZwAKgDNPAysFBrfUwp9W/Al4FfAU8B39Na\nP62U+pbdPuKNVeq8FQkJiunaoVAENuTGLZkORysUs9IIos8GwwpWfMZYo5a2g3ePvVUt/HzGqqWX\nLBp7a86IMo3iITdFce0C+iGsvp9Nf1wqKjgyv5azf3UwYkxWy7W7noGak/bHE+s4j5ZDxYhJmEmZ\nkhJ4+GHw2Lv5a79bS1ff2N9DOGXOMob8Q2h0yi22UmXYAa5HvDHHKwhC9shJnTelVCXwV8D3AbTW\nQ1rr48CVwK7garuAq4LPrwQeCQrKXwIzlFJnA58Efq61fltrfQxjSbs0uGy61vqXQQX6SNS27PYh\nFDsxEgHiJStElATJM8/+maI6T8INwKVDGbe7F0BL3dg4tH6XcXNarKu3T05I9m9dLKHg0CZrtGFJ\npEsz/b+LoXG1nae49dMlY5Y5cISyjD0e2LHDdMRQipNnV/Hc2afHCLcA8ND55nzVfhW6p2Eb49de\nPXbsGhhaMJepD3nB7U792EZGeP3mFdx/gWLEodDKPG69QOHr8CUVa3baf5pSp0mdfanGlILJFa4A\nqWdaC4KQdTL5mc8BjgIPKaV+o5R6UCk1FXiX1vrN4Dp/At4VfH4OcDjs/a8H58Wb/7rNfOLsQyh2\nYiQCHI4RzzOmJEgeeOHuJl4/swStFPV/zG5rKbvXiWyMNX3GmuZvhiteMwKuKyieusLqqk11TaWq\nvIrHFii+/Lmp9JZHipVn5mQmtBRmHGXOUl583otDa374ijduxmUsRhxm/K/PdPLiXY3ceEsNI4Gx\nsYSB6LPj8UBnJ75XfsAtF7/Dx/7LP+ai58CcJ4var5pEDCsZo6vSxPjZtTpTwLv+7SC1R9fj27uJ\nNZ6qlJMnzjnuZ/UBU9TYKm7cdACO3dAwWqx6aXvoM7UrSH3afxowwn1KBkboZD7vgI1lXBCE8SUT\n8VYCfABo1Vq/H+gH1oavELSYZfpHOy7x9qGUWqmUOqCUOnD06NFcDkPIFps22SYIHF7biLvSDYBT\nOQHjHrMrCTKebF41j/d/o5Vzj/njBoMn+yPQGAvPkZklEYVqwwPcW+KVMAlS2xcqyXFjuwP3ViOe\n3Mc1jz6u0Rs0J9edpOfrPQQ2BNixeDtVZ7lRSqHcbmY94KXnSS+PfGjqqLXMr0zrpWRRwf0/tL8E\nT1BseOZ7+P03GhlOQeH6XSWUPGLGf+7bI1y8tiWuRaphTwO1362NCLC/ae9NbHhmOOYFL9qyW1Ve\nxaY35/LA3tC5jJc40dXXxcq9KxlZeg1fWpx6AWA7Ubj6QKiUim9P5GcaXZA61nGkSjIfy0kXnPMP\n5yReURCEnJGJeHsdeF1r/avg63/CiLn/Dro8CT6+FVx+BHh32PvPDc6LN/9cm/nE2UcEWusdWus6\nrXXdrFmz0jpIYZyJcnXhdsOOHVy8toXOr3SO1v/SGzSdX+nMq3Br2t/EsscOphfrFMTKirTE0fcv\nKuV3z3k55+1hHFpTe9yUhqg9rkdfz9zpjWkV04z9UU8ZCkBDg4kntOsMYcWGdXWZEPWuLgauv5an\nmhtYfTm4NhgrVMkG2JGEcBzDwACsWcNQRRlaKT58RyslOrmMUA3cek3lmBirRK5yS0z5Onw07W+i\nf7g/rrA5XMloSQ7vEi89X+9h3U/7k/psra4HA8MDPPXaU1ze7OXcO0rxLEks4uItU8TOEA0vSB1O\nbwyrZjb/RZ8xDC81v0HT/qYsbVEQhFRJW7xprf8EHFZKvTc4qx44CPwEkz1K8PHJ4POfAMuV4SKg\nL+j6/BlwiVJqplJqJnAJ8LPgsneUUhcppRSwPGpbdvsQJgJBVxeBgHksoOBoX4eP2u/WojYqWg+0\npmTpiHan9btMPJijGT6xqx5nQHPjv55OKEg98z188o+a319Tjz+sWOs7rgQ36K4uI9KiBdz69ZFB\n/UDFsGZTG/QP94/OW9oO17+SZrP63l5KB4cixIgD8JO4GHDPYK950tRkAvyV4o+3Heb+ffHfNzA8\nwPq29Rzf2cqhe2OPOwAcXttIYEMg8g9BEoWYNZEtrLr7uvHM93D6vJ08+rKbWacU/WdMYSCqnIv1\nOWVSuiPcPW7nSg0nmwkMCpPUceUtrSLgBCFPZJpt+j7gQaAU+CNwPeaa/COgBugCrtFavx0UYPcD\nlwIDwPVa6wPB7dyAyVIF2KS1fig4vw54GCgHngZu0VprpVSV3T7ijVWyTYVMadrfxPGdrWx5mtGk\nhIAK1RuLh5UdecVr5qbbXWkSBd66sp5nlz+b8dh8HT6u3XMtf7xXJ8wcHXFA0+em8sD/MsLM32z/\nLy6ASTiwyDQrNRbvlMIZQ/FdzoOOUM258PktdXCzTcapxdJ242KMZUELAP/vmnr+4oc2n0GMzGdr\n335lhFt4xqu70k3nrE1jslytbNbdC7J3HqN781qicLyKd2rAtdHJyDdyW8dQECYr8bJNMxJvxYSI\nNyETfB0+9jc38NCTY6vzR5eQiFVSIrrcydJ2uPs5xbv7NKrGbeL9MrAyNu1vom9nKzviiBWLfpfJ\nsLziNdMSK5nxxhJ5iYh1PpJdHo+Aw0Hl31Vwcuik7fJYQkljEhFqt3rNjPXrjaWtpib0OcQoNcKO\nHfgWwMq9KxkYDi2rcFWYGMzF6+OWu0n3PIYTLdzCj2u8Wn5pTELHo49PjnuIIIw3OSkVIgiTifVt\n69ncZt9WSRGq6h+v4X24i9WyCNUc1yhNMM6sgWVXK9RGRfW3qlOuaN9yeQuVNzSyMljBP94tdeqw\nCYiP1d8zupwIxG5PlujWnUhMZCI2VCAQU7hVuCpiurU1Rkjt/M1DY+L9Rl3LMeIv8Xhs21eNJs8k\nKHeTai9Wu7HHOmeKHGeIRe3LtweWXZ2vDr2CMHkRy5sgJKKpiZFtrTh1/Lgpy8XYea+xZkWTTGHc\no+XQX2pu9IcrTSzWaKuuOPg6fKx5eg29wfiwpe2mV2iqZSM0cHiGYu3HNbsXhOYvbWfUXVxIt2rL\n+hM+1nBinWfrs4i1/OTZVfzvr0+ju6+bmsoaNtVvSj45JkGh6USu3EwZT+ubtb8R4H33z+XV1a+O\n454FYWIjljdBSJemJmhtHa3BFYvuSih1luJd4uXw2kYGXJFrR1uyYlmEqgdDJSHcffCBb2yLTDDw\n+aC6Gq3U6NTrn8K1AAAgAElEQVRbofjZnStGhRukX+9LA8//yw946SOmLItCjYqNWQUm3CBk/Xnr\nHrhvn3m0ymu8dQ/se8/YRJEAZj7E/hwq3uylq68LjY7IXE0Km3I34Z9/dC/WwukNkh4KUzeq/eaD\nzNs6L9/DEYRJgVjeBCEOAYcDR4LfyCkH3HAVXN7sDVlnfL7ROKqT/+NMbrn4HR6eFzK1pBK0blls\nrn+1jJbHT9uKMmsMlgUq3biqk2dX8eTPtrC+bf1oW6ZcJSpkGzuLU/gnF77stNMkSsSyJMZrx2ZR\nVV7Flsu22FvkmpqMi9XvB6eTJz76Lj7zV2/YbmdpuxGg4yGMc2mVs871//3UXD62XyxwgpApkrCA\niDchCaIE12PuE3zxl0NxsyB7ymHNZfCThVM5uc4+9gqMW9MSRE7l5JpX/Dy4V1ExrCO2Z7evAKZ+\nVyKXZab9SsMzIsGIis1tsRMaJirR5yGc+/aZ7gexep+21MFHOsd2Y7CyjV+qMec0PON49wJ46y6o\nPj0xzrPGtBh74SVvXuswCkKxI+INEW9CAmwyC2Nl9FlYGYvJlvxo2t/Ejpd34Nd+nMrJv/7wDOoO\nHk94w07WWhIed5dqXJVfwdtTTBuo7krjVrz+ldzFZcVivOO1ovfdU26SUs6waSXRPS120/rwbUBs\ncTfkjEx6iWUZLHZEwAlC5oh4Q8SbkIA4Nb0SYdXXCijTjN0SP+E13bZeNZtvzwm5zZa2g3dPYtdm\nKmLGrhTJXW3w7j44VqEoc5Yx9cQpYKwLUevIGLlEwjXdsWpg0Anl/tgCJ5/ijTj7z+fYihHLErn6\n15PjHiMI2UbEGyLehAQ4HEbBZInoG320Ky4Zt2aA5CvwDytY+dlSds0bpsJVwcDwwGhT83CWtcP3\nnyqh7NTI6D76XTA9SxY2a8zYjNtyHd5yRfxs2+lD9iVZhOJjREFJYHLcYwQh20i2qSAkosa+V2a6\nt51EvSiTaauVyo/z+BR4eN4QGk3/cL+tcFvaDjufhCmnRkZFoRPTqzJbOAC/w15wnnCFuhGsq7dv\nF7bmMvjPmWPbSNkRvUwkQuGRTPcRQRBSR8SbIEDM8g7ZvPeEC7ZMC7VGUzWYeJ14RYbtSPfYnTFq\nX0wLE4m7F8Ad11SNlsvorDSWyRW/CQX7W5OdSLObxoNM9qMxLurJhtoozmZByDYi3gQBRqvpR4uJ\nlrrsCYNwwbauPnFD9nS3HYtkrH0WpxzG5ZUO/hjHFT5Gd6Wb73l7qD2umX//XObcagTdJYfGislY\nrx1EirxcSwQrCD9A6uLRWl7qn3xWxaFmEXCCkG1K8j0AQSgYPB7+/L9W4Nch89TuBbD8ldRjwuxi\n3sKL9Fqxb+FN7rF5T0US+7VrZWVHd2Vy5UM0cKLMFOVNtB6MHfPhz9TzF/v+dUxjdmuMFa4KNtVv\nAmDRI4s42HMw8aCiGM/+nRbPzIFLV0QuX9oO2/Ya13OitlV22451Dl84F+o7oUQDTifqXe9CvxFK\neCkWKWQV8BUEIbuI5U0Qwli5cOWYeasWj43PskMTstptrWOMFS+6btiPzndy1u2mvdOAK/KGHMA0\nju+KY1HTcbZtx7r65Cw4XZWx3bDhx+hZYibrOA/PcPCbOxv5ix8+G9ET9OTZVdxxTRWPLYjqAQq0\nHTKBgD/dZboiFBKnneb4HM1mshNuj+wxwj4dy1+0xVADA07zeV66AlwbwNfuhZEROHIEpTWPtnvZ\nWmesosVkjQs0w8/OU8y8e2a+hyIIEwLJNhWEKKLrsb236r2877mDbEpQsFYDN31+Kh9dvz2itpWv\nw8fKvSsZGA5ZoqyMUIjff3NdfeySIsl0AYjGKjIb61+b1alhc1v8nqBOnPgxFsq4nQZseKdEcUZU\nrbPxcHumSgA4FSxrAqGCzJZQfuuexNbJVLF6tVqFfA9XQtuN9fzy9V+y7qf9EcV9Y31GhYoG2qvh\ng2vKGfibgYTrC8JkR0qFIOJNyA6bV81j7faDMcVPVyW88PzYwqRWh4XwRudWx4VYraysort2giu8\n9IjL4WJ62XR6B3tRKNtMU2B0mdU5oaYPdLA2HRhxsrepnhvPeI4vtOsxRX4HXIqKh35g4gPTYNEj\ni3h6RRslFJ5QS5bwrhq5aGmlMVbY8PNuV4dv2GESQwpR9MYj+pv5zBz469ukob0g2BFPvKG1nhTT\nwoULtSBkgx9/fLYOmPvpmMkPuuqeqqS242336opNFfpQpf22DlWiaTbT0iXmtT84f+mS0DKa0e57\n3bbbd9/r1qpZafe9bu1t98adb9G4r1GrZhWxz64ZSj9/V2Pa5+y+OrOdWOct21Ou9xPI0T7G6/wU\nyhQA/dtq9Nz756b93RKEiQpwQGt7TSOWN0FIg6MVytZlZrkVvUuSawvk6/Dxq3vWcNePeiOsLfH6\na9qhUAQ2xKjRkQZ2lsJ02xzdf4FidYx+oNki/CrmV9BWa5+5WshYx1BMY84GGuMqfvTxyXEvEoRk\nEbcpIt6E7PLlhuq4gstd6abzK53Jb9Dn4+TX1lDxZi/dlfCdK6q48PYto67VRKS8v3FCbVQx3cLZ\nRkc9z4dLUYftO5zwenV2y8G4EN/7dnbj2GLtq9CwuwsNAVOaQW+YHPcoQYhGOiwIQpa58PYtNF7p\njJlR2t3XndoGPR6mvdGDQ2tqj2u+5+3BM9/DpvpNVLgq4r41vPRGobG0ffzEQ3j2plUDLh8ojPVv\na53JUj3zrhmgNav3NeJoNnGMjrDJmn/piuQzglMZC2R3m7kgul6fAkoxWapaqYjpmfMUvg5fHkcr\nCPlHLG+CkCa+Dh/Lf7ycgB7rrsymJSzahfmp93yKp157KisuzZzi8xFoaJi0/xAtK1xvuSm9cmzW\nNJ5cfiErp/9iNJN55cKVtFzegudqxaZgEkmmFsNisbalS/Qdy67+3hTnFB688sHC/F0IQpKI2xQR\nb0JuiFUGJLyW2WQloNSkFW6xiHe1nciCK5dojIDb9f7Iotc95fDA8rms2yaZrEJxIm5TQcgRnvke\ndizegbvSjWJsEdrJygMXlaYtRiby30k792CxlfsoNBQmOcW3x9Tds87nrEG4Y/tB/FFuV60Ur8xS\nlP9dubhfhaJFLG+CIGSdEYcyrZ3SIIApRFvTZ1yO04egzKaobyqk8h4NBBQonVhY5dJFGX76hjAx\nYCLyskP0uS2bJPdBobgQy5sgCOOKM4N7YbfVxaEZzrodrr8y1IJrRKUnYFIRbs/MgZINZv+eJYld\nnTpsyiZdlaGkhjcrRbhlkzGJEUqx7GpFyZ0lNO1vyu/gBCEJRLwJgpB1/GkqjdPOUAN7i90LjJgr\n3ejEmcQ20hFRlvj65z9z4llVFbHv9urE2+yqzK5463dFnoeaGOVDxF6UOVZ2sm8PvHm3n+M7W0XA\nCQWPiDdBELLOtoXpCYtSvwk6X9oemlfiKKGxrpFzp59L1/TE20jXMqfcbj7+hxG2XLZltDzLT3fB\ngp7421SY2mxDDmMdDCeVc2AJyM5KeOFceOTHplTG8EY4WRp730J2sOLkHtgLx3e2ihVOKGgk5k0Q\nhKwzb+s8nlp7kJqT6QmMANBSB7dcETn/p7ty1zkh+krYPY2Ux3+0HPpLjaUsoEgp7m/QCRV/a3rZ\nRnekmKzdFyA/pU+s8+1XsO//zOaqtiPjPAJBkJg3QRDGmVdXv8p5X3XQU5aeBc4BNB2ItMAB1Hfm\n7kYenf2ZjvCsGgzF6zlSPHArKaPRppVYJpm7xf73PKDAz/geh/UdKNFw5XNv8HrNzHHcuyAkRsSb\nIAg5wb/Bz/s2zeaZOekF9TuAzW3m+dJ2OHRvZokQqZKu+zWRqzMWDreb618ti3tRHk7xij0RypA4\nNRyuNMkj/a7x378Czjl8HL9SvHC3uFGFwkDcpoIgjAsz757JNx8/TlOYZSmRsAgADUtMHFJ4H9li\nwBKr0XrLzgUafhWOdU4mmus0FXdoAGPNzKXbPBlGP9NJct8U8ot0WEDEmyAUAjPvnsnx08cBE9vV\neCB+H9JUBEshtoXyY2LgzhgyrwOEshsnOwGSPw/JiNtUyEQIi4ATxguJeRMEoSA4tvYYjXWNgElG\nKGmOX0stmSK51lRowg3MBbZyXaheW0lzYY4zHzhI3o2eq04U6cgvaxxaKY5WmPpw0zZPk24Nwrgi\nljdBEPKOVirtG/M7QctWIYqiEQWuDZHz/M3yr9miUEV3Klh30BNO2Psb76RvjSdkD7G8CYJQ0PSU\np//eQhVuGlPvLpz79hXmWPPFRDgXliXuDD8sfn9DvocjTBJEvAmCkHf2NtVzKs2rUSELgPf0Rr5e\n9fL4jndy+FUKA0vAhbtT522dl+9hCRMUcZsKglAQrF42k/t3Hy9oMZYqdlfXbGeTxrqCBxQ8Wwsf\n+BNUDyaOHZxI570QsPtcesrhgeVzWbft1XEfj1B8iNtUEISCZ+ujx2ipy621aLz/qkYX/s0V3dNC\nSRGOZphzrxtnQPPXt83lrNtjH7eV7DEsyi3rRH/2Vvutv37gIJtXiUVOyAwRb4IgFAyrf61pOy+7\nIssSKEfLx/YeHW8S9UhNd5s1J6FvkylmXOGqYFP9JnwdPrrf6QaguzL+NlyTwwFTEEwJwLLHDuZ7\nGEKRI+JNEISCYtF/aV68q5GuysxFnCZklTrrdmjNsWUvUxTpl6+YPgzePXBy/QDLFjRwyYUNLD5w\nEoB19fbdCcbDKiiMpaYv3yMQih0Rb4IgFBwXr23BfVxnJLQ08MwcOO+roctcdKP7QsQScOn0JbUK\nHlsuOt8ek+G6ewG8cG5hC9fJRCJLqCAkoiTfAxAEQYhFdyXUpmGl0MDWOrjrC7Px33ZkdL7aWBw2\npnQtcHbbWX2A0ZZkxXH0E5tTDnj0C3NZl++BCEWNWN4EQShY1tXDUIJ1okVOACPcnrilniNhwq3Y\nyJbYstpxiXDLD+FW1KPl8J0vSbapkDki3gRBKFgefVxz3RJ4xxV5Ewyf2quhs9KItq5KePi2em7+\nteZvfvgmAaXQYZO/OfMxacy+3ik1vUs15nEk800LEwzrj4VnCXxiVz2zBrQINyEriNtUEISC5tHH\nNU37m9jx8g782o9TOXlv1Xv5fe/vR1+vXLiSlstbcAMDFxih9lHGWpuy4Y7sKTfJD9Hct0/ck0Ik\n1vfAtwdO7Gvja8+dw98/XLzWYKFwkCK9giBMGO6/QLH6QG7Fk2Xx6640bt3dC0yJjoeehDJ/Dncs\nFD2nneD7Sj03fPvZfA9FKAKkSK8gCJOCXAs3CMWQ1fbBA3vhp7uMZUWE28QnU1NHmR8+/mAb1d+q\nxtfhy8qYhMmJiDdBECYET9SfM+77nDoMlxwSN+lkIRufs7sPmv+xl5V7V4qAE9JGYt4EQZgQXPnc\nG3kRUSLchFSwyrfAAA3DDbzY/SItl7fkeVRCsSGWN0EQBEEYRywBF2iGjZ9rZdnVikWPLMr3sIQi\nQsSbIAiCIIwz4Z0wdv0Y9tzYNlrS5miF4mvXjX8YgFA8iHgTBEEQhDzi0qY3bbig+9auN3joQxX5\nHppQoIh4EwRBEIQCQwHX/esgK78wTRIbhDGIeBMEQRCEAkQB637aT8OeBomJEyIQ8SYIwoSge1p2\nmrkLQiFR02ce2w610bS/Kb+DEQoGEW+CIEwI3Cf0aPcDQQinmL8TgbBaNDte3pG/gQgFhYg3QRAm\nBM+cp6SvqGBLMX8nHGHK06+ljYdgEPEmCMKE4BPS6UCYgHRXhp47lTN/AxEKChFvgiAUPa/MEtkm\nTDz6XbCuPvR65cKV+RuMUFBkLN6UUk6l1G+UUvuCr+copX6llPqDUuqHSqnS4Pyy4Os/BJfXhm3j\njuD83yulPhk2/9LgvD8opdaGzbfdhyAIk5MFPWJ1EyYOGuishC8tht0LQKForGuUNlrCKNmwvK0B\n/iPs9T3AvVrrPweOAV8Mzv8icCw4/97geiil5gJfAOYBlwItQUHoBLYClwFzgaXBdePtQxAEQRCK\nnpo+2NwGS9thVd0qEW5CBBmJN6XUucDlwIPB1wr4OPBPwVV2AVcFn18ZfE1weX1w/SuBx7TWp7XW\nh4A/AH8ZnP6gtf6j1noIeAy4MsE+BEEQBKGoUZibc20f+PbA1itaR1tnvVOmWP7ZEincO8nJ1PL2\nXeDrQCD4ugo4rrUeCb5+HbAatJ0DHAYILu8Lrj86P+o9sebH24cgFCW+Dh9n3HUGy65WDDjV6IU6\n1nS0QnH9NWWT/gI+b+s87r/AOEyLuRyEIMRCRU3Th2DX436WLWjArxT/+Xkp3jsZKUn3jUqpK4C3\ntNYvK6U+lr0hZQ+l1EpgJUBNTU2eRyMIY/F1+Lhp7030D/eztB1+sAeSySebNQjb9gxxg78BmsEz\n35ProRYEM++eyWM7jnPJIfP6d8H5Eu8mTCas77sTeO+P2njxlQo+/J8D+RySMM5kYnn7MPBppVQn\nxqX5cWALMEMpZYnCc4EjwedHgHcDBJdXAr3h86PeE2t+b5x9RKC13qG1rtNa182aNSv9IxWEHODr\n8NGwp4H+4X4AtjydnHCzKPPDrh/DzzauyM0AC4yZd8/krTuMcIu2RgjCZEUBH/r9IAGluP8CJV0Y\nJglpizet9R1a63O11rWYhIPntNYe4J+BzwZXWwE8GXz+k+Brgsuf01rr4PwvBLNR5wDvAf4N+DXw\nnmBmaWlwHz8JvifWPgShsPD5ODm7mkCYy3PEodh6gWLFnkjRVT2Y+uZLNLT+xM+yqxVqo6Lsm1ly\npfp8DJaMddcGlKJzhuJr16UXqbDtQicjjtju4EDU63fKFDu/atxCXX9znBJErAlCNFaM3OoDcOUt\nrdIHdTKgtc54Aj4G7As+Pw8jvv4A/CNQFpw/Jfj6D8Hl54W9fz3wX8DvgcvC5n8K+H/BZevD5tvu\nI960cOFCLQjjyfdvq9eDDrRm7BQA/dM56EOVaD/ot8rNPLt1k5n6StE0h6bGfY3afa9bq2alb/FU\n6RNnV2mtlNZut9Zeb/yBe716RMXfXyBseqsM2808f1ejPhW1bjrHGMjC+ZFJpskyBUDfV2euAUJx\nAxzQ2l7TKLN84lNXV6cPHDiQ72EIk4Sm/U1s/Fwrs+JY0zTZsyJpYNAB5cHUoZ5yWHMZfKgbmg5E\nmthPlTqYsvMR8ITi5L523Tnc6X2DKcHuO6mMK/wKcsIFZSNQqlPfTjL7EaubICQmADQsgRk3SG24\nYkYp9bLWus52mYg3Qcg+JXeWMLzBn1exoYOTXWzE2xWKkmHNGcOheSKMBGHi0FkJc26F2dNmc+Q2\n27BwocCJJ96kPZYg5IBCaCBtxcHYMXNAM31Ygv4FYaLi7oORZrjjsTeYt3VevocjZJm0S4UIghAb\np3LSU+6P6zbNJyLWBGFiozDZ66sPwHt6D8LqfI9IyCZieROEHLBy4UrWXAanU6n9IQiCkGUUcMkh\nWHa1/GWbSIh4E4Qc0HJ5CzNuaOSLVyqOliPV/wVByBsKeGRPvkchZBMRb4KQI1oub8H7eIBZAxrl\n9UJV1egyjckIKyRRp6MmQRAmDuIEmFiIeBOE8cDjgZ6e0WpMSmscWvPkx2fbCqV8iKdsJy+IABQE\nQcgNIt4EIY9c1XaE//upufgJWbzeKYWtdeTV3ZpqnbdAhtsQBEEQkkfEmyDkmY/tfxWn1qze14hr\no5PKdfDlKxTn/e00nplT2BYsjSnMq0WpCYIgjBsi3gShQGi5vIWRb4ygN2gCGwI8ra7lo12FbcFS\nwPRhcCapMDUwokLxfhJfJwi5RwPd0/I9CiGbSJ03QSggfB0+1ret58PPd7Hrx6bxfKoEyPxfWS5b\nUbk2wNJ2ePAJ086rkMWpIBQj0ZeN7mngPhH7YuLr8LHm6TX0DvYCMNU1lZHACKf9pwFQKFwOF1f/\ndojNbVDTB92VsPnSqVx07kVc2focZw5Ebv+ZOfDp60sZCgzhVE782k9VeRUnTp9gKDAEgEM5uGnh\nTTFbeD1znuIThyK32fOkF898j+36kwlpjyUIeaJpfxPbX95OQJuIsVJHKRrNZ387zM4nYIpdIFkM\nLAtWbzlUD2YmiDQwpKAsB5eG8E2KaBOE7KKBIeBrniruf8/b1FTWsKl+0xix07S/iZuua2VBT2he\nezW87+bY217aDg/shalhLfU04MfeCqQxYuvSFbG3Fy4E19XDYwsUGs3Sdvj+kzDFH3mdsHo4T4n6\n09deDb97buKJOultiog3IT9YlrSuvq7Rf5/Wo0X0ReysE1CRgnCzsH7JyYiiRJa1ADDoirxQC4JQ\nGIwocGjzZw2gatBcO567sZ4bvv1s3PeGC7doYRQt4MKvTQGVuidAA47msfPv2wdNByI9BNEhFKl4\nDzQwAqxbMZsjJ94YHfPhSji8tpGL19pb9godEW+IeBPGH1+Hj5V7V3LlywNsedpYxAB6ymHNZbB7\nQex/s/m2SlkXUrvSIXYisRDGLAiTgRFg+RJz/QCYVjqNbVdsS9rqVHJnCcMb/La/13CxZXdtShU7\n8ba0Hbx7chNwP4JJnnKFyZoA8MBfOpn24K6is8yJeEPEmzD+TNs8jU+/3G/rAo0njuKRinUtExKJ\nsaPl0F9q/t2GjydX4xJxKEx2NDCs4LrPGOE2e9psjtx2JOXtqI2KQLP97ylcbB26F2r70h+vtb2e\ncmMZDN/feP+WrettIGixfHNmCefc97Cpv1nAxBNvkm0qCDlg51cX8btv9ePbYx+7pjA/vnQuYuPx\ndyvRuKoGTYzKCKHjyOYFOTwT9Wh5FjcsCEWGBt5xgWeJEW6b28DfDC9+8w08Vyua9jeltD2nit9r\noe+b5rEmQ+EG5powazDyGpGPP2HW9bZEm8dzjo0weP214PPlYTTZQcSbIGQBX4eP2u/W4tjo4MsN\n1Xz+e23U9mX/QhVQJrYlUzIVgN2V5iZSmvlQxrTl6qw0RYq7Ks3r/lLz710QioVs/cGytnPGMPj2\nmKm2z9y4a/tgx144vrM1JQG3cuHKmONTwBl+6P9m4Vm6s11WqHxYM3JtA9qhoLa26IScuE0FIUOs\n2LaB4QEgO+4GOzRG1LxUk1ksihWY/J630yvVEe4KyeTfn3XlsWIAIRQcDZHbPu00ncVSycAVhHwQ\nYHwtTCMKrvuMwvt4/B/H1647h9VPvEFNX/4sYAVNRQXs2FFQrlSJeUPEm5A7ar9bS1df1+hrf3P2\nTdoa6CmDs+4wrz3tir9r06MX4mhiXZgDQENYsHOyQtMu1i6TenLRMWzJiLPxvikKAqQWb2n9MYrO\n5Mw11u/zRCmUjJg/ZXbIbyc+nZXwsWa3bXmVfCAxb4KQQ7r7uiNfx3BrjgbNJrHNaFdie7URblNd\nU/Eu8eJ9PEDtcdPcXgUnZ7OyTcsPRwEfChvuunrodyUej51ocmDvxgg/zvB+rUfLQ/Oit1XmT2xV\nSzdGUBAyIdXv3HgLNwj9PqcPmTJD4fFl+Yw1KzbcffDHW7tYtqABrRRaKQJK8ehfzcz30MYg4k0Q\nMqSmsibitZ0g6nfBQ7fVo7Tm7pvm0llphMyICha6VCGh01MOL97VOCrKlNacf1SjN2hOrjsZ8x+h\nNY548WEKaHw59Hr3AvhDZWaxJAOO0Nj9yrh2Hc3gbDaPjmaoXAdn3W6ErdxEhImKiKTiJjyRTIW9\nXvr8cV6ZVVifrIg3QciQTfWbqHBVjL7evQBuvsrFybOrQClwu5n6kHe0eOa6ba9y4/fqcTabVlGO\nZigJPn5iVz3VAzqtopLWONZcZkoKxMKhTa0li0wsBQoo1SHhpjRc8Vrk9sPJRgbbRCHauioIQmGi\nMNfJrjMKR8CJeBOEDPHM97Bj8Q7clW4UCnelm0V/+xDT3uiBQAA6O8cEwT67/Fm8S7wR7/Eu8fLs\n8vjV0ZMZx4/Od7J9YWxBoIAtT6e9mzFY6ffWY22fSaiwE3CBGNe+XAqYQhVG4tLKL4X6vRAKEwXU\nnDT9VgsBSVgQhAnGC3c38f5vtMbNRg0vxhmrYGemdFbCnFsj5+UimUMQ0kEKPwvpoAE1TrpJEhYE\nYRLxvu/9KKUyIs/MyY0Vws5Fmo0adYKQDUS4CcWMiDdBmGBUvNmb1HrRbs1kXJfhWaSJ6LVJnFhX\nn393Vb73LwiCkCki3gRhgpGMdUthCuL+dBdccij52Kue8tQyRpe2m1py/mbzCMmVSsklkiAgCEIm\n+Dry341BxJsgTDCStW65+0LCLVmqBpPPGK0aNIkL4e18HtgLv6vOr3jqrjR9Ik/Hb/EoCIJgy2fO\nb8i7gBPxJggTjMcWKE4k0XQ0nSzH7srk49YCamwLr6nD+SliaqGBqUPg3QOnHcm5iQVBECwUUK7h\nkgsa8joOEW+CMMFYVbeKVVfASJa3O6yMVS+ZrgynnaaenB35DhSfFezJOn04/lgkG1GYCMgfkOyj\ngOrT+R2DiDdBmGC0XN7CE+8vZ/mS7Fy4rRixEg2+PaZG3EPnM9ol4mg5vOOKKjjrL0zhk8yYJCZO\nmEiMx+9Qfi/jT0m+ByAIQva56jeDePdktg27ZvRgLFerw0omVg+G1rf+DZZltuu8IxY5QUge+T2M\nP2J5E4QJxrKrFd49mTdyjxcTZ9f0eqJcTBKdM7lRCcLkRgM9ef6HOlGut4IgBNncJj9sQRCEXKCB\nIWDWqfw6i+UaLwgThEWPLEJtVLiLqPm7xMoIglAsaKC9GsoKoK2oiDdBmADMvHsmZz3Zxlv35Hsk\nyaExiQ6CIAjjQaZyS2PqQ55/NP/CDUS8CULRsvOrizhaodBK8fYdx/HuMckEycZkpZJVGZFJmgV6\nyuGs21Pb3mknnJIrliAIecCv4NHHC0O4gYg3QSgq5m2dh9qoWHa1ouEf2kbFWqoJAxrTkH5rHfhJ\nrlita6OTA3NnRAi5dAVd1eDY3qrxCAAPvB9uuApGJGNAEIQUyIbVbdvCbIwke0ipEEEoMHwdPtY8\nvYbeQd0QjrQAACAASURBVNNgvqq8imvmXUPrgVaWtsP+NtPaKlUNY13ABh2w8wOwvD359livz1Ds\n+swuLviGB1+Hj5V7VzIwPACYnqW1KcbZKUzNuGSPwUGoPEms4r+CIAjRpFvax7rM+JURbrdcATdn\ncVyZIuJNEAoIX4ePG568gSH/EGA1ju8FWtlKZC21ZNHACResWgy7F8B9+4wQSvaC1u+C7ttX4Znv\nARh9XN+2nu6+br5zxZnc/aNeKobjbSWSdC6mCjPuTLTbeNVok1pwkwv5vAuXdD8XhYnLPet281pv\nKKx/jSLeBCGPvHB3E7Xf2sHsY35en6HY/3HN0AKz7Lf3j+0DmsqFSGNiy9ZcZkQbGFdlU5LCTQNd\nlfD62kYuXtsSscwz3zMq4gA8g6a2XK5vYJaLOJ2b5UjwH3QqwjVd0h2jUJzI5zwxqR4sPNFmIeJN\nELKNzwfr16O7uzgyw8nt/8dPVXkVG545zcyjJ+muhGf/VylXvjLEh8MSDGqOax7YG9pMNhq4//v/\nCAk3SL4GXL8LvrQYZtzQSMvlLWOW+zp8o5a3msoaTl5YRVdbb8ru03SxzkusLhB2ODS8VJO8eI0m\nVTEmN3RBEHKF0gVQr2Q8qKur0wcOHEi8oiBkgs/H0IoGSv2hWXYCI54QOFoOZw6CMwvDsRITLl1h\nXvub44s3y1q3/tNT+ej67RHWNYvwmLel7UYQ1vSBVkYgZUu0JCuWjpbDzFOm92qi9fpLU4/PS3U8\nglCsyHc8kqPlMGsgfxpJKfWy1rrObplkmwpCFvB1+Fj5hWkEGiKFG9i3mYp3gazOknCz9nPJoVBm\nZ3dl7HUDmOzTCza72fHYSVvhBibWzRJuD+w1YsgBOLMk3DSm6f0zc5KLb6saTC6JoXqQjAoYy00t\nfSaHiaD4ke94iNNOuPWywj0j4jYVhCSIdhNuqt80Km6a9jcxt7mV7VmKpUo1ri3RexTw0JPwoW6Y\nOjT233V4QsOTCyvYUb/Jdjs7v7qIz36vjUNhiQm5urTNudU83rcPGl+Ob9ELKCMcE1G4l+GJj5x7\nodDRmMxShzZ/ctfVw4wbVuV7WDER8SZMWpr2N9F6oHX0tUKxqm5VRIzXzq8uYnFLG8sGYRlWAkAX\n+59v4MNtDdT0wX1ZdhemwolSOGMo8Xpl/rGB+uF65+0KKHOWsmPxDjzzPWPE6lN3Heb6twLjfowv\n1cDyV+CM4dju50TuUkEQMieV+NJipKsy9KcRoLHOPt63UJCYN2FS0rS/ieM7W9ncNtaV9swc6HnS\ny+ldD7Hs3jamBCKXj2DcmoVwEctmjIoGjlUo1i6u4ORwfyiWDeMWTbeuXEAZl6xLRy6LtT0ry9X6\nXOzWs4oDS9yHIIwPVrZ244HshXXki+jrT78LfnPn2Kz6fBMv5k3EmzA5CMsA7Z4Oe98D178CU21q\nk1lB/u99O/3g9vEiFwHG2fiHbWWrhpco2fK0iTtLtN1kj0mCqwVhfJkI1jeNie1d/Bq8uw/emOmk\n8+srC064QXzxJm5TYUJgF5MGcNPem/j0y/08sNcINYWx6DQdiG21sYL8J8ffmrFkcmHWmHiRO+oj\nS5SAyQjNlnATBGH8mQi/zcMzFDN3/gB3MGb53OBUbIjlTShufD5Ofm0NFW/2jgaZ7l4ADhwEMP7O\ndNo3Wa67YrS85dOlaAX9OnWorcxLNYyK53jvs0j2BuFXcKok/nYtLM+3XeZvoTARrBqCUMgUqns0\nFlIqRJiY+Hyc/uJ1THuzFwdGaD2w17joAgRY2m6EW7rlIdbVF771ze5Gf8IFQ3n8ZZcEkzdKtEmS\neOjHiQWWIjVhpYHXpxrXbGdl7M/JKjvSUhe/TEq+sVw5W+sK/zsnCMXIiCou4ZYIsbwJRUvvWWdQ\ndfTkmPmdQQtcImtPLCzLlSUkis0SkmvXY6rbz9V4NNB/dhXT/vQ2OBzg949ZJ9PvwniSjvVREITE\nnHbCP9w4l3XbXs33UFJCYt6ECclMG+EGJkNyc1tiN12sLMZCdq2FE+sYcpXAYDHohIqxOikmuTyX\n097sNU/8ftsMsnX1ib8LhUIxfOcEoZjQwKADvnbNDLYWmXBLhLhNhaIllhusu9IIODuirWrRFNMN\ndDzGamXeOprhE7vqmXVPFTvfb+/aG28bvl3XCh02VQyDb09mXRUEQSg+rGvA1jr49EP1bH30WL6H\nlHXE8iYULX9Tr9i+V0dYVSxry1029dssikmgFQpv3QPVg22jr+3O4RBQGmPZeJHt7hSCIBQfGnBo\nzc3AzfkeTI4Qy5tQtEy/YdVowHoA82jVFruj3gi5cE7Jtz1lrLIpswYTJxWkKtx0nCnXTI5IX0GY\nnBwu4OSkbCGWN6Foabm8hSbgz8/fgV/7USh08LZs1RizugT0lpsG5mJlSZ1cnbN8fRZSS04QJi7D\nDmi7sZ4b8j2QHJO2LUIp9W6l1D8rpQ4qpV5VSq0Jzj9TKfVzpdRrwceZwflKKfU9pdQflFLtSqkP\nhG1rRXD915RSK8LmL1RKdQTf8z2llIq3D2Hy0XJ5CyPfGEFv0DhU5Nd59wLTq87ZbHp7iuEttxSL\nICqWcQqCkByWxf6dUvjBrfXc8O1n8z2knJPJ/WwEuE1rPRe4CFitlJoLrAXatNbvAdqCrwEuA94T\nnFYCrWCEGLABuBD4S2BDmBhrBb4U9r5Lg/Nj7UOYxPh17BTIZJq35xtx5QmCMFlJN3RiBHjxrkaU\n1kw/rSeFcIMMxJvW+k2t9b8Hn58A/gM4B7gS2BVcbRdwVfD5lcAj2vBLYIZS6mzgk8DPtdZva62P\nAT8HLg0um661/qU2xegeidqW3T6ESYxTFV675FSyMgNiEhIEYRJhCbW+aSV88XNlOJpNZrtnCRwt\njx8Xq4F3XPDLuyZO4d1UyErMm1KqFng/8CvgXVrrN4OL/gS8K/j8HOBw2NteD86LN/91m/nE2Ycw\niVm5cCWtB1rzPYxRAkBHNfzvntC/pBOlcGg6LOiJdN/5XSU8/4n/yQU/PxiRPSvxWflBMlEFIbdY\npTxm7vTime9hJ7AzuKxpfxNnLRh7La+fU8+zy0OWtenAxeMx2AIkY/GmlJoGPA58RWv9TjAsDQCt\ntVZK5dQbFG8fSqmVGBctNTU1uRyGUAC0XG7+fW1/eTsBHRidr0YrgI0PVl/UdfXwysfn0tXXRf9w\nf8Q6S9tDyRQDZ1cx7e+38DGPh82r5rHssYPU9Jl6dVKjbPzwK1DaWECdWoSbIOQKS7jd/Gv763LL\n5S2j13PBnozEm1LKhRFuPq31nuDs/1ZKna21fjPo+nwrOP8I8O6wt58bnHcE+FjU/F8E559rs368\nfUSgtd4B7ADTHiutgxSKilg/+te3lHDusbExcbmwsGig9rjm0STXnxb2fN22V/Gt9vGxtvV09XXx\n1j2mTIeQW0xdKPO8RK4UgpAzLOF2sLkx30MpajLJNlXA94H/0Fp/J2zRTwArY3QF8GTY/OXBrNOL\ngL6g6/NnwCVKqZnBRIVLgJ8Fl72jlLoouK/lUduy24cg2NL59ZVj6r71u0xshWcJpNDtKS4a0wQ9\nEzzzPXR+pRPvEi9rLjN9+YTckqiGnSAImRMu3MSylhmZWN4+DFwLdCilfhuctw64G/iRUuqLQBdw\nTXDZU8CngD8AA8D1AFrrt5VS3wR+HVzvTq3128HnTcDDQDnwdHAizj4EwZaL17bwAuC+ZzvnHA/Q\nHXRrWvXgALY8DdVxrFzhN/aAzfyAgtaFsV0BqbK+bT1dNvXqqqVenSAIRYbVai9b18fJjjKJnBOf\nuro6feDAgXwPQyggfB0+1retp7uvG6fDyUhgZHTZ7GmzcTlddPd1U1NZwzde/3Mu2fkLZh/z88ZM\nJ51fX5nzDCfHRsdo0eFwDt0LtRILN2GQpBRhMqAxmaR6w+TQHNlAKfWy1trWlyMdFoRJi2e+B898\nT/Jv+LZ5OJfIYMxcUVNZQ1df15j56+ph5xMwJWDzphSJvoyKiBh/5JwLkwG/KsxyTsWKFJ0XhAJl\nU/0mSp2lY+bvXgA3XDW2DlI48YpdWvOPlpt4P6U1Smseuq2eETW+PUYFQZj4aExc8TWv+FEbVcS0\n6JFF+R5eUSLiTRAKFM98Dzuv3ElVedWYZbsXwFm3E1HUsrPSxOJ1VprXjmYTHBwgJMYCmHlTv1nO\nrAHNo4+HJNoN336WkoDmE7vqR7c5EQTcRDgGQShmFFCmwbcH3rrHlEqyaDvUxryt85LeVtP+Jkru\nLEFtVJTcWULT/qbRZT87T6FVclNAKe6/QKW070JCYt4EoYgIj9OrqaxhU/2m1Fy/KXK0QhVVqZLo\n+LEhYEcdXP8KEcWPBUHIH/0u+NLiyISx2dNm89v1b1B9OvXtnXDCGcGSAamEIVjZr63XzeXV1a+m\nvuMcEy/mTcSbIAgxeeHuJj58R2vBx2VZbpltdXDFayYzV6tQ7bZwCv1YBGEy0BnM+I/O8k/n95lJ\n0k8AcDYXZiJFPPEmblNBEGJy8doWHrzQlVKP1vHGcgW7muGJW+o586S5kFtdEqInQRDyj7vPuFFn\nDWb++8zkd12s1wQRb4IgxOVLvxzi5qUzeMcVip3zK9O31U/+khusxtQ3fNbFzb/W6A2a3SvbOMNf\nvBdkQZgsyJ+pzBDxJghCQrY+eozpQ3o0M9UZ0Cw4qnms3cuse6oiEiZGVChJIldo4OEPljN9SPPw\nPw4BcOPnK6g+LTcEQRAmPlLnTRCEtAmvlefrCPVkBfjt/bCgJ3MxFS0CAwoeuaic618aGJ134+cr\naP3HQRFugiCkjKMI7VjFN2JBECK47nOlHK0IpcAfrVAsu1pR+91afB2+hO/3dfj4uU2Kfe9UB8uu\nVqNp+Ym252mHzu+C3qg4sb2KrfVTIyxy4S7W6CnWMiuezSqJ8old9TgDOkK4AXznx4O4CiUITxCE\nosBq2eXfkK3u1uOHZJsKQpGx86uLqH+wjXf3wUkXnDE81rpl/ap7yuGH8+Dzr4YyunrKofmqGWjP\nUra/vJ2nHg5wySF7C5mVSn/LFeZ1hauCHYt34Jnvwdfh46nmBr4bli2mot5rt70df+lg1a/Su1g2\n7W9i+8vbCWjTXmKqayrbF29n2YIGsbrFQNpvCYI9GlOkvFCRUiGIeBMmBr+4fB5/9dTBlEzmdjfv\nVNpiBYCGJaGaTO5KN5vqN7G/uYGHnoSyFHVY+L5HiIzdaK+G991sinhubjMlPwLBkh/dwdIC1jiW\ntsO2vUa8JjqGyYoIN0GIjYi3IkDEm1DM+Dp8PPvNG/j+Pw7lJdbhaLnp6BDOoXuhti+7+7FcqH6n\nvSiUXqwhRJgJQmYUs3iTmDdBKHB8HT6u3XMtG57Jj3AD4xYNb2kDxiqWbRTGEhfLmic120JM9uMX\nhEwZKuIfkYg3QShw1jy9Bo3OiVhKFoVxY4bTXZmXoQiCIGSMBv5m+ex8DyNtRLwJQoHTO9jL0vbc\nW1oSFduNFo/r6guny4IgCEKyBIDdH5nB3z98JN9DSRsRb4JQ4Ny3z7SRyaV4S0aERVvadi8Q8SYI\nQnFglR7qrISX7mpk2b8cy/eQMkLEmyCME74OH19uqKZzhiKgFEfOdLHsaoXaGJqa9jeNrr/zq4s4\nWqFYfSD3VrdEcWQaY3m7b1/kfHGdCoJQ6GhMZnvl5mm8+LyXi9e25HtIGSPZpoIwDjTtb6JvZys7\n9sLU4dD8YQc4AuZflF9BWy184E/2ddMKAetqEV7SY+cTMCWQnW3n4nglK1MQJj5W2Ifdb729Gs4/\nWnxaJ162qbTHEoQc4+vwse3ANv7YFincAFxhoqdEE7NYbqFgjW1BD7x1F1RlqZfoaSeU5qDIefFd\nrgVBSJbw33c8gXb++AxnXBG3qSDkCp8PamtZuqCB/75H404iW7SQhVs4Cqg+bS4gmYzZ+rdc6s/N\nsVuuYBFxglC8RLfSs2LXPEtg9b5GlNZFaVnLBLG8CUIu8Plg5UoYGMABzBrM94CyTzbE1niJ1WIR\nxYIgGMJb/DVfNYOtj5oEA2dwfi3waB7GVSiIeBOEXLB+PQwMJF5PEARBGMOJUph+WjML2JrvwRQg\n4jYVhBwQ6OpKar3JZegX4iHfBUEw9Lvg5sXOxCtOYkS8CUKWWfTIIk668j0KQRCE4uCUw/RPtmLZ\nvrQYPrlhV76HVdCI21QQssxZT7ZxxnDi9UBisYQQ8l0QJgpWcsHJUjhjKHLZkAKXhoACh4bDleD7\nwlx2/EU/3X3d1FTWsKl+E575nnwMvWgQ8SYIWcLX4WN923p+0SY34kyQumyCULxoYGsdrP3MVLYv\n3j5GhJUFHy23nxtYF5yE5BHxJggZYAm2rr5QjFs+G8jbUWxiqJjGmgrRMW0T9TiFyYWOer7zolJm\n7tjJSbGc5RQRb4KQIuGCTaH4QrvmF21GtHVXwiknVOSg4Gy6iEjIL5Z4ls9BKGbsEmo00LAEHn3c\nLFXAjeM5qEmMiDdBSAJfh49V+1ZxcuhkxPwvtGseCGt5VdsnWYNCJCLahEIn0TVrBFgRJtIsFJO7\n1lo+EfEmCAl44e4mLrmzlXeChXZPuAAVCsSNvjln82ZtXSrjNYwXcSAI40c893e2/riN12/aSiy4\n+6a5rNv2asz1XIhIKzSkVIggxMPn48J1rcwaDLm+pg/D9KHxcYUl2ocIN2GyYSeQRjBlJrKx7XhT\nANOSydFsJs8SU9oivF1T2UYXSuu0p611ZnuJxpKN42yvBofWcYWbUJgorSeHk6eurk4fOHAg38MQ\nCgi7ZINo3ronvdZWhWwRS2TNE4RCRQPPzIEP/Amqg7/LnnJYc5n5Pj/0BLhsVFyy1rHuaeA+Ufj3\nxN4pijNPR84bdMCIk4gyRdG/cR326Jgk9/5iRin1sta6zm6ZWN6ESce8rfNQGxUNexriCjcI3SBS\nQUc95hO7f+zFHjyf6LzGsk5k03IxUSn08+NX8Mk/amYNhCxVswY0jz6u8T2uKfWH5n9iVz2OZiP2\nwo/rmTlQ0uywtXoVg3ADqDo1duwVfs30obB5Xi+nZkwbPe7eCsWLd5km7iLcih8Rb8KEx9fhQ21U\no9P5zx3k0L3gb4ZD98LS9tC6P90FgebQlA6K/Auk6BvwCZexUBSraLNcVp2VpobUSJx1ttZhe9Nu\nO4/RG9v2v3QwoiaHoEvkfgs/t8rrRWnNi3c10luhCurcaOCFy+Ymvf6zy5+lfk49l64IuTkdzbD4\nOhf+DQWUDp4rPB6mHDsx+p2v6g9w8dqWfI9KyBLiNhUmNL4OHw17GkZfL22Hh/dAadg6mlC1byg8\ngZMtN2chu3ItYl2NttbBLVeY51XlVSw+cIJv7RuKcJ09sDx+0HUiNq+ax5ceOTjG2pqrZJHx+Dw0\nsPsjM1j2L8cy25DPx+nlDZRlI7AsDTTwx9nl/NmRgfwMQBDyQDy3qYg3YUJT/a1qegd7R1/3bTIJ\nB0Lh0e8yPQ13LzCvq8qr2HLZlvy2yfH5ONH4RaadMAFGlsh/e9Y0drtPcv0roTIxqeBX0LoQGl8G\nZ44uwRpjScOTpfPn89H7pWs5c3BsuYiIfWZhV+F7CCh47XP1/MUPn83ClgWheBDxhoi3yYavw8f+\n5gY2B4vn9pab+dWDhW99yiWFZn2zrj5dlbCuHv7pfBdD3xiK+55CwfqObXk68fcq/CrbUw6//0Yj\nXZd/mJ/duYLWJ/0RAvC0E94phapBeLscSkfiB6HH2t8QUJbr63tTE4Ht21GBAH4FAw44w5+5RdIP\nfHlfIy2Xi5tPmLzEE29orSfFtHDhQi1MXLztXl32zTL922p0gNCkZYqYRlT+9h2ImvygH7ioVHvb\nvfn++qSNt92rVbPSfc7437cAaJqxff8tnip9qNKcjxNnV2nt9UYsd9/r1qpZafe9bv3Pn5qrR8LO\n4Wll3hd9bvvV2H2NG16vHiwrGTOmZL8jfU6K+jshCNkCOKBjaBqxvAlFzwt3N3Hu3a24gz1FC8my\nVEiE/9LtSgjk6rxZ+z3hhA9umcurqydeTSlfh49lCxrixsc5mkFvmBzX2zH4fBy55TrOPjaCDosv\njaa9Gn73nDe/rnJBKBDEbYqIt4nKf35+Ef/zR22SNh2HfLtKJ41wqa6G3t4xszWmftg9j4kbUBCE\n5JE6b8KEw9fh48EPlvFeEW4JEUvkOLFlC7hcEbM00FMmwk0QhOwi9z2hePD5ODm9HK0UyxY08MVf\nDokwKRLmVidfn6to8XjgoYfA7QalwO1Geb3MOqVFuAmCkFXEbSoULFb7qu6+bla86mLbniHKJkFt\nzYmGxhTHFQRBEJInntu0ZLwHIwixCO816lAOtuwN8McDlttvYlrZ8h2Plg7FOGZBEISJhIg3Ief4\nOnzctPcmjq3vj/jCaeCWpTM47T/Nd54YZNkQLBtdakq5F6tICJA4JkFjWjjVHwInxXGsqdrPrGP8\nZC4GIwiCMEkR8SZknXB355nlZ9I72MtQs/myhQsUBdy/+/jo84nCKQc8+AFY/ooprhpdgR6MuGsN\na/l03z5oPBAp+MItXHbbGO9zZgkxgEsOJVeU9pk5ppG4IAiCkD0kYUFIG1+Hj9rv1uLY6ODLDdWc\nnF2Ndig+8lfX8qHnu9Boegd7Wdo+VrhZ5LuBeyrosCmAqYIfwLQ6suYfLYfbPj+DL1+hqFwfbKIe\nXD6iQk3TS5ph5k4vpQ7TZfWWK8y8T+yq59F2L1PuLMXZbNb1LDFNw63m4Z4lkdu1m+KNPR3rmbXf\nS1eYKbrp+4gyVfGt509+fDZKaxFugiAIOUASFoS0WPTIIr7W3MYlh0Lz7KxDdsvySTLxWrHWOVoO\nswZCRxZuYayprGFT/abR4qLxluWCeVvncbDnIABL2+G+nyrODI61pxzWXBbqGXroXqjtS37bVp22\nREx1TWX74u1SYFUQBCELSJFeRLxlk6b9TVx5S2tC11mhEkucaUyPzd+fCZ84FGmWPuWAv712Nn//\n8JHxGWQOsATlh5/v4oG9UJFkQ/VE4q2xTmqYCYIgZBsp0itklR0v7yha4QZGjJyK+uafchi34Jxb\njVuwIcpVWezCDcAz30PnVzrxPa6peMjLybOrRt2/6fyFm+qaineJV4SbIAjCOCPiTUgZvy7uYmvd\nlXDDVZHi7Mufm8rlzV68S7y4K908tkDxsWY3u9u91B7XRS/cxuDxMO2NHhxa4944A88SE7MWjQbe\nuHDu6HlRKNyVbrxLvJxcd1JcpIIgCHlA3KZCyqiNikBzcVre+l3wpcUm/quqvIotl20RARJk86p5\nfOWBg5QHQvPeuHAu5/xy4jWSFwRBKHSkSK8wadHAEOACjsxwsPbjAV76iBtvjhMIipF1216FbZHz\nzsnPUARBEIQ4iHgT0qKnHGYNpvYey8Y7BJTazA8ocGg46YJpw5n59K1ttlfDhWvK+P6V38cz34Mv\ng20KgiAIQiEgMW8FzKJHFrHsakXnDEVAmcfrrynD15FfCVI/p541l40N+o92wAf4/+3de4wV5RnH\n8e+Pu4BZbtZwvyTEhqStIlFIjTFdpaJSm8Y/QBJIL0pEk5o2NSCmXdvatDVpiqkg1KptU6qttpVS\nDQr6N7JWQAQpi265FMtiAiZEW6VP/5h3lwF3j8A5u7Nz+H2SN+edZ+acec9Dhjw7M++cU59/tuAr\nMOQHFzAwgjvX30GfpmwWY9/U+n8ve21Ynk0Y+E8nn1lJ+/PX2p9J1rdJfK4t+OC+D3yWzczM6obv\neeulrv3NtXzq2U388q8wJPdIh+P9YfFcMafpt4UWJO3j+9EmmHAsmwSwfirctCdbbhs5iO/PHsTK\nS452vGfM0DEc/PYn3/g/+IeDef9Edlpv/nZY8TyMev+T77Frbchmi7ab2DCR1rtbz+HbmZmZFcvP\neaN8xZvuV5cPU21tgGuaekdh0v67pcc/PA5AH/Vh8eWLa/L4iCV/W8Kq5lUAnGiqfJo4PxEBYHD/\nwayZu8Zn3MzMrJTqdsKCpOuBFWS/6/1oRPy44CHV1IQunoI/4RjsO7avZwfThQWfWdBtBVJ7Abiq\neRX7GjovZNsfrHtv48nCbWLDxG7/RQMzM7OilLZ4k9QXeBi4DjgAbJG0LiJ2Fjuy2umqYNnXABMa\nJvT8gAqw8saVrLxxJd95eyxNa//1sUvIt82FF67MHvmx1sWamZmdB8o8YeEKoCUi3oqI/wJPAjcX\nPKaaaZzcyL2NWYGSd7w/3NcoHmh8oJiBFeTBJw7SdOuYUx6s23TrGNY+Exy554jPspmZ2XmjzMXb\nWGB/bvkApz2WStLtkpolNbe1tfXo4Kq1ceFGDt/cyG1zT/0lgLu+PKDwyQpFefCJg0w6GvSJqM9f\nPTAzMzsDpb1seiYiYg2wBrIJCwUP56xtXLgRFp5cngQ8XtRgzMzMrFco85m3g8D43PK4FDMzMzOr\nW2Uu3rYAUyVNljQAmAesK3hMZmZmZt2qtJdNI+IjSXcBG8geFfJYRPgXtM3MzKyulbZ4A4iI54Dn\nih6HmZmZWU8p82VTMzMzs/OOizczMzOzEnHxZmZmZlYiLt7MzMzMSsTFm5mZmVmJuHgzMzMzKxEX\nb2ZmZmYl4uLNzMzMrERcvJmZmZmViIs3MzMzsxJx8WZmZmZWIi7ezMzMzErExZuZmZlZibh4MzMz\nMysRRUTRY+gRktqAfxY9jm4yCjhS9CDqkPNae85p93Bea8857R7O65mbGBEXdbbivCne6pmk5oiY\nUfQ46o3zWnvOafdwXmvPOe0ezmtt+LKpmZmZWYm4eDMzMzMrERdv9WFN0QOoU85r7Tmn3cN5rT3n\ntHs4rzXge97MzMzMSsRn3szMzMxKxMVbgSQ9JumwpB252AhJL0rak16Hp7gkPSSpRdJ2SdNz71mU\ntt8jaVEufrmk19N7HpKkSvuoF5LGS3pZ0k5Jb0j6Zoo7t+dI0iBJr0jalnJ6f4pPlrQ55eEpSQNS\nAP5apQAABExJREFUfGBabknrJ+U+a1mK75b0xVz8+hRrkbQ0F+90H/VCUl9Jr0lan5ad0ypJak3H\n51ZJzSnm479KkoZJelrSm5J2SZrlvBYkItwKasDVwHRgRy72U2Bp6i8FfpL6NwDPAwJmAptTfATw\nVnodnvrD07pX0rZK751TaR/10oDRwPTUvxD4BzDNua0qpwKGpn5/YHP6/n8A5qX4I8Adqb8EeCT1\n5wFPpf40YBswEJgM7AX6prYXmAIMSNtMS+/pdB/10oBvAWuB9ZW+r3N6VjltBUadFvPxX31efw18\nI/UHAMOc14L+LYoewPnegEmcWrztBkan/mhgd+qvBuafvh0wH1idi69OsdHAm7l4x3Zd7aNeG/As\ncJ1zW7N8Dgb+DlxJ9rDNfik+C9iQ+huAWanfL20nYBmwLPdZG9L7Ot6b4stSU1f7qIcGjAM2AV8A\n1lf6vs7pWeW1lY8Xbz7+q8tpA/A26V5557XY5sumvc/FEXEo9d8BLk79scD+3HYHUqxS/EAn8Ur7\nqDvp0tJlZGeKnNsqpMt7W4HDwItkZ3WORsRHaZN8Hjpyl9YfA0Zy9rkeWWEf9eDnwD3A/9Jype/r\nnJ65AF6Q9Kqk21PMx391JgNtwOPpMv+jkobgvBbCxVsvFtmfGd06Hbgn9lEUSUOBZ4C7I+K9/Drn\n9uxFxImIuJTsbNEVwKcLHlKpSboJOBwRrxY9ljp0VURMB+YAd0q6Or/Sx/856Ud2m8+qiLgMOE52\nCbOD89pzXLz1Pv+WNBogvR5O8YPA+Nx241KsUnxcJ/FK+6gbkvqTFW6/i4g/pbBzWwMRcRR4mexy\n2zBJ/dKqfB46cpfWNwDvcva5frfCPsru88CXJLUCT5JdOl2Bc1q1iDiYXg8Dfyb7Y8PHf3UOAAci\nYnNafpqsmHNeC+DirfdZB7TPvllEdr9We3xhmsEzEziWTiNvAGZLGp5m4Mwmu3/lEPCepJlpxs7C\n0z6rs33UhfR9fwXsioif5VY5t+dI0kWShqX+BWT3EO4iK+JuSZudntP2PNwCvJT+Yl4HzFM2c3Iy\nMJXsJuUtwFRlsyAHkN2Qvy69p6t9lFpELIuIcRExiez7vhQRC3BOqyJpiKQL2/tkx+0OfPxXJSLe\nAfZLuiSFGoGdOK/FKPqmu/O5Ab8HDgEfkv1V83Wy+1E2AXuAjcCItK2Ah8nuM3odmJH7nK8BLal9\nNRefQfaf1l7gF5x8KHOn+6iXBlxFdlp9O7A1tRuc26py+lngtZTTHcB3U3wKWaHQAvwRGJjig9Jy\nS1o/JfdZy1PedpNmk6X4DWQzg/cCy3PxTvdRTw24hpOzTZ3T6nI5hWxm7Tbgjfbv7eO/Jrm9FGhO\n/w/8hWy2qPNaQPMvLJiZmZmViC+bmpmZmZWIizczMzOzEnHxZmZmZlYiLt7MzMzMSsTFm5mZmVmJ\nuHgzMzMzKxEXb2ZmZmYl4uLNzMzMrET+D6rDsLoAETFAAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 720x576 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}